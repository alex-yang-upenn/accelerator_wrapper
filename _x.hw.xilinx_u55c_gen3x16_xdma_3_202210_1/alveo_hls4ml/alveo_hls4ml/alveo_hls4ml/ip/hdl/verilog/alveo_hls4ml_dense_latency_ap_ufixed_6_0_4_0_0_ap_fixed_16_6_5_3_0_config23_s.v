// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i_dout,
        i_num_data_valid,
        i_fifo_cap,
        i_empty_n,
        i_read,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        out_buf_address0,
        out_buf_ce0,
        out_buf_we0,
        out_buf_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [12:0] i_dout;
input  [5:0] i_num_data_valid;
input  [5:0] i_fifo_cap;
input   i_empty_n;
output   i_read;
input  [5:0] p_read;
input  [5:0] p_read1;
input  [5:0] p_read2;
input  [5:0] p_read3;
input  [5:0] p_read4;
input  [5:0] p_read5;
input  [5:0] p_read6;
input  [5:0] p_read7;
input  [5:0] p_read8;
input  [5:0] p_read9;
input  [5:0] p_read10;
input  [5:0] p_read11;
input  [5:0] p_read12;
input  [5:0] p_read13;
input  [5:0] p_read14;
input  [5:0] p_read15;
output  [12:0] out_buf_address0;
output   out_buf_ce0;
output   out_buf_we0;
output  [14:0] out_buf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg i_read;
reg out_buf_ce0;
reg out_buf_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    i_blk_n;
wire    ap_block_pp0_stage0;
reg   [5:0] p_read_185_reg_512;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] p_read_185_reg_512_pp0_iter1_reg;
reg   [5:0] p_read_188_reg_517;
reg   [5:0] p_read723_reg_522;
reg   [5:0] p_read420_reg_527;
reg   [5:0] p_read319_reg_532;
reg   [5:0] p_read16_reg_537;
wire   [10:0] add_ln813_fu_313_p2;
reg   [10:0] add_ln813_reg_542;
wire   [10:0] add_ln813_3_fu_319_p2;
reg   [10:0] add_ln813_3_reg_547;
wire   [10:0] add_ln813_7_fu_325_p2;
reg   [10:0] add_ln813_7_reg_552;
reg   [10:0] add_ln813_7_reg_552_pp0_iter1_reg;
wire   [10:0] add_ln813_9_fu_331_p2;
reg   [10:0] add_ln813_9_reg_557;
wire   [10:0] add_ln813_10_fu_337_p2;
reg   [10:0] add_ln813_10_reg_562;
wire   [13:0] add_ln813_6_fu_442_p2;
reg   [13:0] add_ln813_6_reg_567;
wire   [12:0] add_ln813_12_fu_464_p2;
reg   [12:0] add_ln813_12_reg_572;
reg   [12:0] i_read_reg_577;
wire   [14:0] add_ln813_14_fu_502_p2;
reg   [14:0] add_ln813_14_reg_582;
wire   [63:0] zext_ln66_fu_508_p1;
wire   [9:0] shl_ln818_1_fu_193_p3;
wire   [9:0] shl_ln818_2_fu_201_p3;
wire   [9:0] shl_ln818_5_fu_209_p3;
wire   [9:0] shl_ln818_6_fu_217_p3;
wire   [9:0] shl_ln818_8_fu_225_p3;
wire   [9:0] shl_ln818_9_fu_233_p3;
wire   [9:0] shl_ln818_s_fu_241_p3;
wire   [9:0] shl_ln818_10_fu_249_p3;
wire   [9:0] shl_ln818_12_fu_257_p3;
wire   [9:0] shl_ln818_13_fu_265_p3;
wire   [10:0] zext_ln813_1_fu_273_p1;
wire   [10:0] zext_ln813_2_fu_277_p1;
wire   [10:0] zext_ln813_5_fu_281_p1;
wire   [10:0] zext_ln813_6_fu_285_p1;
wire   [10:0] zext_ln813_8_fu_289_p1;
wire   [10:0] zext_ln813_9_fu_293_p1;
wire   [10:0] zext_ln813_10_fu_297_p1;
wire   [10:0] zext_ln813_11_fu_301_p1;
wire   [10:0] zext_ln813_13_fu_305_p1;
wire   [10:0] zext_ln813_14_fu_309_p1;
wire   [10:0] zext_ln813_cast_fu_371_p4;
wire   [9:0] shl_ln818_3_fu_343_p3;
wire   [9:0] shl_ln818_4_fu_350_p3;
wire   [9:0] shl_ln818_7_fu_357_p3;
wire   [9:0] shl_ln818_11_fu_364_p3;
wire   [11:0] zext_ln813_16_fu_400_p1;
wire   [11:0] zext_ln813_fu_380_p1;
wire   [11:0] add_ln813_1_fu_403_p2;
wire   [12:0] zext_ln813_17_fu_409_p1;
wire   [12:0] zext_ln813_3_fu_384_p1;
wire   [11:0] zext_ln813_20_fu_419_p1;
wire   [11:0] zext_ln813_4_fu_388_p1;
wire   [11:0] add_ln813_4_fu_422_p2;
wire   [12:0] zext_ln813_21_fu_428_p1;
wire   [12:0] add_ln813_2_fu_413_p2;
wire   [12:0] add_ln813_5_fu_432_p2;
wire   [13:0] zext_ln813_18_fu_438_p1;
wire   [13:0] zext_ln813_7_fu_392_p1;
wire   [11:0] zext_ln813_24_fu_451_p1;
wire   [11:0] zext_ln813_12_fu_396_p1;
wire   [11:0] add_ln813_11_fu_454_p2;
wire   [12:0] zext_ln813_25_fu_460_p1;
wire   [12:0] zext_ln813_23_fu_448_p1;
wire   [9:0] shl_ln818_14_fu_470_p3;
wire   [13:0] zext_ln813_22_fu_481_p1;
wire   [13:0] zext_ln813_26_fu_489_p1;
wire   [13:0] add_ln813_8_fu_484_p2;
wire   [13:0] add_ln813_13_fu_492_p2;
wire   [14:0] zext_ln813_19_fu_498_p1;
wire   [14:0] zext_ln813_15_fu_477_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln813_10_reg_562[10 : 4] <= add_ln813_10_fu_337_p2[10 : 4];
        add_ln813_12_reg_572[12 : 4] <= add_ln813_12_fu_464_p2[12 : 4];
        add_ln813_3_reg_547[10 : 4] <= add_ln813_3_fu_319_p2[10 : 4];
        add_ln813_6_reg_567[13 : 4] <= add_ln813_6_fu_442_p2[13 : 4];
        add_ln813_7_reg_552[10 : 4] <= add_ln813_7_fu_325_p2[10 : 4];
        add_ln813_7_reg_552_pp0_iter1_reg[10 : 4] <= add_ln813_7_reg_552[10 : 4];
        add_ln813_9_reg_557[10 : 4] <= add_ln813_9_fu_331_p2[10 : 4];
        add_ln813_reg_542[10 : 4] <= add_ln813_fu_313_p2[10 : 4];
        p_read16_reg_537 <= p_read;
        p_read319_reg_532 <= p_read3;
        p_read420_reg_527 <= p_read4;
        p_read723_reg_522 <= p_read7;
        p_read_185_reg_512 <= p_read15;
        p_read_185_reg_512_pp0_iter1_reg <= p_read_185_reg_512;
        p_read_188_reg_517 <= p_read12;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln813_14_reg_582[14 : 4] <= add_ln813_14_fu_502_p2[14 : 4];
        i_read_reg_577 <= i_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        i_blk_n = i_empty_n;
    end else begin
        i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        i_read = 1'b1;
    end else begin
        i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_buf_ce0 = 1'b1;
    end else begin
        out_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_buf_we0 = 1'b1;
    end else begin
        out_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln813_10_fu_337_p2 = (zext_ln813_13_fu_305_p1 + zext_ln813_14_fu_309_p1);

assign add_ln813_11_fu_454_p2 = (zext_ln813_24_fu_451_p1 + zext_ln813_12_fu_396_p1);

assign add_ln813_12_fu_464_p2 = (zext_ln813_25_fu_460_p1 + zext_ln813_23_fu_448_p1);

assign add_ln813_13_fu_492_p2 = (zext_ln813_26_fu_489_p1 + add_ln813_8_fu_484_p2);

assign add_ln813_14_fu_502_p2 = (zext_ln813_19_fu_498_p1 + zext_ln813_15_fu_477_p1);

assign add_ln813_1_fu_403_p2 = (zext_ln813_16_fu_400_p1 + zext_ln813_fu_380_p1);

assign add_ln813_2_fu_413_p2 = (zext_ln813_17_fu_409_p1 + zext_ln813_3_fu_384_p1);

assign add_ln813_3_fu_319_p2 = (zext_ln813_5_fu_281_p1 + zext_ln813_6_fu_285_p1);

assign add_ln813_4_fu_422_p2 = (zext_ln813_20_fu_419_p1 + zext_ln813_4_fu_388_p1);

assign add_ln813_5_fu_432_p2 = (zext_ln813_21_fu_428_p1 + add_ln813_2_fu_413_p2);

assign add_ln813_6_fu_442_p2 = (zext_ln813_18_fu_438_p1 + zext_ln813_7_fu_392_p1);

assign add_ln813_7_fu_325_p2 = (zext_ln813_8_fu_289_p1 + zext_ln813_9_fu_293_p1);

assign add_ln813_8_fu_484_p2 = (zext_ln813_22_fu_481_p1 + add_ln813_6_reg_567);

assign add_ln813_9_fu_331_p2 = (zext_ln813_10_fu_297_p1 + zext_ln813_11_fu_301_p1);

assign add_ln813_fu_313_p2 = (zext_ln813_1_fu_273_p1 + zext_ln813_2_fu_277_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((i_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((i_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (i_empty_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign out_buf_address0 = zext_ln66_fu_508_p1;

assign out_buf_d0 = add_ln813_14_reg_582;

assign shl_ln818_10_fu_249_p3 = {{p_read11}, {4'd0}};

assign shl_ln818_11_fu_364_p3 = {{p_read_188_reg_517}, {4'd0}};

assign shl_ln818_12_fu_257_p3 = {{p_read13}, {4'd0}};

assign shl_ln818_13_fu_265_p3 = {{p_read14}, {4'd0}};

assign shl_ln818_14_fu_470_p3 = {{p_read_185_reg_512_pp0_iter1_reg}, {4'd0}};

assign shl_ln818_1_fu_193_p3 = {{p_read1}, {4'd0}};

assign shl_ln818_2_fu_201_p3 = {{p_read2}, {4'd0}};

assign shl_ln818_3_fu_343_p3 = {{p_read319_reg_532}, {4'd0}};

assign shl_ln818_4_fu_350_p3 = {{p_read420_reg_527}, {4'd0}};

assign shl_ln818_5_fu_209_p3 = {{p_read5}, {4'd0}};

assign shl_ln818_6_fu_217_p3 = {{p_read6}, {4'd0}};

assign shl_ln818_7_fu_357_p3 = {{p_read723_reg_522}, {4'd0}};

assign shl_ln818_8_fu_225_p3 = {{p_read8}, {4'd0}};

assign shl_ln818_9_fu_233_p3 = {{p_read9}, {4'd0}};

assign shl_ln818_s_fu_241_p3 = {{p_read10}, {4'd0}};

assign zext_ln66_fu_508_p1 = i_read_reg_577;

assign zext_ln813_10_fu_297_p1 = shl_ln818_s_fu_241_p3;

assign zext_ln813_11_fu_301_p1 = shl_ln818_10_fu_249_p3;

assign zext_ln813_12_fu_396_p1 = shl_ln818_11_fu_364_p3;

assign zext_ln813_13_fu_305_p1 = shl_ln818_12_fu_257_p3;

assign zext_ln813_14_fu_309_p1 = shl_ln818_13_fu_265_p3;

assign zext_ln813_15_fu_477_p1 = shl_ln818_14_fu_470_p3;

assign zext_ln813_16_fu_400_p1 = add_ln813_reg_542;

assign zext_ln813_17_fu_409_p1 = add_ln813_1_fu_403_p2;

assign zext_ln813_18_fu_438_p1 = add_ln813_5_fu_432_p2;

assign zext_ln813_19_fu_498_p1 = add_ln813_13_fu_492_p2;

assign zext_ln813_1_fu_273_p1 = shl_ln818_1_fu_193_p3;

assign zext_ln813_20_fu_419_p1 = add_ln813_3_reg_547;

assign zext_ln813_21_fu_428_p1 = add_ln813_4_fu_422_p2;

assign zext_ln813_22_fu_481_p1 = add_ln813_7_reg_552_pp0_iter1_reg;

assign zext_ln813_23_fu_448_p1 = add_ln813_9_reg_557;

assign zext_ln813_24_fu_451_p1 = add_ln813_10_reg_562;

assign zext_ln813_25_fu_460_p1 = add_ln813_11_fu_454_p2;

assign zext_ln813_26_fu_489_p1 = add_ln813_12_reg_572;

assign zext_ln813_2_fu_277_p1 = shl_ln818_2_fu_201_p3;

assign zext_ln813_3_fu_384_p1 = shl_ln818_3_fu_343_p3;

assign zext_ln813_4_fu_388_p1 = shl_ln818_4_fu_350_p3;

assign zext_ln813_5_fu_281_p1 = shl_ln818_5_fu_209_p3;

assign zext_ln813_6_fu_285_p1 = shl_ln818_6_fu_217_p3;

assign zext_ln813_7_fu_392_p1 = shl_ln818_7_fu_357_p3;

assign zext_ln813_8_fu_289_p1 = shl_ln818_8_fu_225_p3;

assign zext_ln813_9_fu_293_p1 = shl_ln818_9_fu_233_p3;

assign zext_ln813_cast_fu_371_p4 = {{{{1'd1}, {p_read16_reg_537}}}, {4'd0}};

assign zext_ln813_fu_380_p1 = zext_ln813_cast_fu_371_p4;

always @ (posedge ap_clk) begin
    add_ln813_reg_542[3:0] <= 4'b0000;
    add_ln813_3_reg_547[3:0] <= 4'b0000;
    add_ln813_7_reg_552[3:0] <= 4'b0000;
    add_ln813_7_reg_552_pp0_iter1_reg[3:0] <= 4'b0000;
    add_ln813_9_reg_557[3:0] <= 4'b0000;
    add_ln813_10_reg_562[3:0] <= 4'b0000;
    add_ln813_6_reg_567[3:0] <= 4'b0000;
    add_ln813_12_reg_572[3:0] <= 4'b0000;
    add_ln813_14_reg_582[3:0] <= 4'b0000;
end

endmodule //alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s
