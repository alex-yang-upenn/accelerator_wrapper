// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_relu_ap_fixed_16_6_5_3_0_ap_ufixed_6_0_4_0_0_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ap_ce,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
output  [5:0] ap_return_0;
output  [5:0] ap_return_1;
output  [5:0] ap_return_2;
output  [5:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ap_return_0;
reg[5:0] ap_return_1;
reg[5:0] ap_return_2;
reg[5:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] p_read_1_reg_602;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] p_read_2_reg_608;
reg   [15:0] p_read_3_reg_614;
reg   [15:0] p_read_4_reg_620;
wire   [5:0] p_Val2_1_fu_122_p2;
reg   [5:0] p_Val2_1_reg_626;
wire   [0:0] Range1_all_ones_fu_138_p2;
reg   [0:0] Range1_all_ones_reg_632;
wire   [0:0] Range1_all_zeros_fu_144_p2;
reg   [0:0] Range1_all_zeros_reg_637;
wire   [5:0] p_Val2_3_fu_202_p2;
reg   [5:0] p_Val2_3_reg_643;
wire   [0:0] Range1_all_ones_1_fu_218_p2;
reg   [0:0] Range1_all_ones_1_reg_649;
wire   [0:0] Range1_all_zeros_1_fu_224_p2;
reg   [0:0] Range1_all_zeros_1_reg_654;
wire   [5:0] p_Val2_5_fu_282_p2;
reg   [5:0] p_Val2_5_reg_660;
wire   [0:0] Range1_all_ones_2_fu_298_p2;
reg   [0:0] Range1_all_ones_2_reg_666;
wire   [0:0] Range1_all_zeros_2_fu_304_p2;
reg   [0:0] Range1_all_zeros_2_reg_671;
wire   [5:0] p_Val2_7_fu_362_p2;
reg   [5:0] p_Val2_7_reg_677;
wire   [0:0] Range1_all_ones_3_fu_378_p2;
reg   [0:0] Range1_all_ones_3_reg_683;
wire   [0:0] Range1_all_zeros_3_fu_384_p2;
reg   [0:0] Range1_all_zeros_3_reg_688;
wire    ap_block_pp0_stage0;
wire   [2:0] trunc_ln828_fu_96_p1;
wire   [0:0] p_Result_s_fu_80_p3;
wire   [0:0] r_fu_100_p2;
wire   [0:0] or_ln374_fu_106_p2;
wire   [0:0] p_Result_10_fu_88_p3;
wire   [0:0] and_ln374_fu_112_p2;
wire   [5:0] p_Val2_s_fu_70_p4;
wire   [5:0] zext_ln377_fu_118_p1;
wire   [5:0] tmp_s_fu_128_p4;
wire   [2:0] trunc_ln828_1_fu_176_p1;
wire   [0:0] p_Result_3_fu_160_p3;
wire   [0:0] r_1_fu_180_p2;
wire   [0:0] or_ln374_1_fu_186_p2;
wire   [0:0] p_Result_12_fu_168_p3;
wire   [0:0] and_ln374_1_fu_192_p2;
wire   [5:0] p_Val2_2_fu_150_p4;
wire   [5:0] zext_ln377_1_fu_198_p1;
wire   [5:0] tmp_1_fu_208_p4;
wire   [2:0] trunc_ln828_2_fu_256_p1;
wire   [0:0] p_Result_6_fu_240_p3;
wire   [0:0] r_2_fu_260_p2;
wire   [0:0] or_ln374_2_fu_266_p2;
wire   [0:0] p_Result_14_fu_248_p3;
wire   [0:0] and_ln374_2_fu_272_p2;
wire   [5:0] p_Val2_4_fu_230_p4;
wire   [5:0] zext_ln377_2_fu_278_p1;
wire   [5:0] tmp_2_fu_288_p4;
wire   [2:0] trunc_ln828_3_fu_336_p1;
wire   [0:0] p_Result_9_fu_320_p3;
wire   [0:0] r_3_fu_340_p2;
wire   [0:0] or_ln374_3_fu_346_p2;
wire   [0:0] p_Result_16_fu_328_p3;
wire   [0:0] and_ln374_3_fu_352_p2;
wire   [5:0] p_Val2_6_fu_310_p4;
wire   [5:0] zext_ln377_3_fu_358_p1;
wire   [5:0] tmp_3_fu_368_p4;
wire   [0:0] tmp_fu_402_p3;
wire   [0:0] p_Result_11_fu_395_p3;
wire   [0:0] select_ln888_fu_409_p3;
wire   [0:0] deleted_zeros_fu_415_p3;
wire   [0:0] icmp_ln1649_fu_390_p2;
wire   [5:0] select_ln302_fu_422_p3;
wire   [0:0] tmp_6_fu_449_p3;
wire   [0:0] p_Result_13_fu_442_p3;
wire   [0:0] select_ln888_1_fu_456_p3;
wire   [0:0] deleted_zeros_1_fu_462_p3;
wire   [0:0] icmp_ln1649_1_fu_437_p2;
wire   [5:0] select_ln302_1_fu_469_p3;
wire   [0:0] tmp_10_fu_496_p3;
wire   [0:0] p_Result_15_fu_489_p3;
wire   [0:0] select_ln888_2_fu_503_p3;
wire   [0:0] deleted_zeros_2_fu_509_p3;
wire   [0:0] icmp_ln1649_2_fu_484_p2;
wire   [5:0] select_ln302_2_fu_516_p3;
wire   [0:0] tmp_14_fu_543_p3;
wire   [0:0] p_Result_17_fu_536_p3;
wire   [0:0] select_ln888_3_fu_550_p3;
wire   [0:0] deleted_zeros_3_fu_556_p3;
wire   [0:0] icmp_ln1649_3_fu_531_p2;
wire   [5:0] select_ln302_3_fu_563_p3;
wire   [5:0] select_ln1649_fu_429_p3;
wire   [5:0] select_ln1649_1_fu_476_p3;
wire   [5:0] select_ln1649_2_fu_523_p3;
wire   [5:0] select_ln1649_3_fu_570_p3;
reg   [5:0] ap_return_0_preg;
reg   [5:0] ap_return_1_preg;
reg   [5:0] ap_return_2_preg;
reg   [5:0] ap_return_3_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_0_preg = 6'd0;
#0 ap_return_1_preg = 6'd0;
#0 ap_return_2_preg = 6'd0;
#0 ap_return_3_preg = 6'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 6'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_0_preg <= select_ln1649_fu_429_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 6'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_1_preg <= select_ln1649_1_fu_476_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 6'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_2_preg <= select_ln1649_2_fu_523_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 6'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_3_preg <= select_ln1649_3_fu_570_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Range1_all_ones_1_reg_649 <= Range1_all_ones_1_fu_218_p2;
        Range1_all_ones_2_reg_666 <= Range1_all_ones_2_fu_298_p2;
        Range1_all_ones_3_reg_683 <= Range1_all_ones_3_fu_378_p2;
        Range1_all_ones_reg_632 <= Range1_all_ones_fu_138_p2;
        Range1_all_zeros_1_reg_654 <= Range1_all_zeros_1_fu_224_p2;
        Range1_all_zeros_2_reg_671 <= Range1_all_zeros_2_fu_304_p2;
        Range1_all_zeros_3_reg_688 <= Range1_all_zeros_3_fu_384_p2;
        Range1_all_zeros_reg_637 <= Range1_all_zeros_fu_144_p2;
        p_Val2_1_reg_626 <= p_Val2_1_fu_122_p2;
        p_Val2_3_reg_643 <= p_Val2_3_fu_202_p2;
        p_Val2_5_reg_660 <= p_Val2_5_fu_282_p2;
        p_Val2_7_reg_677 <= p_Val2_7_fu_362_p2;
        p_read_1_reg_602 <= p_read3;
        p_read_2_reg_608 <= p_read2;
        p_read_3_reg_614 <= p_read1;
        p_read_4_reg_620 <= p_read;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_0 = select_ln1649_fu_429_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_1 = select_ln1649_1_fu_476_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_2 = select_ln1649_2_fu_523_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_3 = select_ln1649_3_fu_570_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_1_fu_218_p2 = ((tmp_1_fu_208_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_298_p2 = ((tmp_2_fu_288_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_3_fu_378_p2 = ((tmp_3_fu_368_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_138_p2 = ((tmp_s_fu_128_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_224_p2 = ((tmp_1_fu_208_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_304_p2 = ((tmp_2_fu_288_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_3_fu_384_p2 = ((tmp_3_fu_368_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_144_p2 = ((tmp_s_fu_128_p4 == 6'd0) ? 1'b1 : 1'b0);

assign and_ln374_1_fu_192_p2 = (p_Result_12_fu_168_p3 & or_ln374_1_fu_186_p2);

assign and_ln374_2_fu_272_p2 = (p_Result_14_fu_248_p3 & or_ln374_2_fu_266_p2);

assign and_ln374_3_fu_352_p2 = (p_Result_16_fu_328_p3 & or_ln374_3_fu_346_p2);

assign and_ln374_fu_112_p2 = (p_Result_10_fu_88_p3 & or_ln374_fu_106_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | (1'b0 == ap_ce) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign deleted_zeros_1_fu_462_p3 = ((p_Result_13_fu_442_p3[0:0] == 1'b1) ? select_ln888_1_fu_456_p3 : Range1_all_zeros_1_reg_654);

assign deleted_zeros_2_fu_509_p3 = ((p_Result_15_fu_489_p3[0:0] == 1'b1) ? select_ln888_2_fu_503_p3 : Range1_all_zeros_2_reg_671);

assign deleted_zeros_3_fu_556_p3 = ((p_Result_17_fu_536_p3[0:0] == 1'b1) ? select_ln888_3_fu_550_p3 : Range1_all_zeros_3_reg_688);

assign deleted_zeros_fu_415_p3 = ((p_Result_11_fu_395_p3[0:0] == 1'b1) ? select_ln888_fu_409_p3 : Range1_all_zeros_reg_637);

assign icmp_ln1649_1_fu_437_p2 = (($signed(p_read_3_reg_614) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_2_fu_484_p2 = (($signed(p_read_2_reg_608) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_3_fu_531_p2 = (($signed(p_read_1_reg_602) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_390_p2 = (($signed(p_read_4_reg_620) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign or_ln374_1_fu_186_p2 = (r_1_fu_180_p2 | p_Result_3_fu_160_p3);

assign or_ln374_2_fu_266_p2 = (r_2_fu_260_p2 | p_Result_6_fu_240_p3);

assign or_ln374_3_fu_346_p2 = (r_3_fu_340_p2 | p_Result_9_fu_320_p3);

assign or_ln374_fu_106_p2 = (r_fu_100_p2 | p_Result_s_fu_80_p3);

assign p_Result_10_fu_88_p3 = p_read[32'd3];

assign p_Result_11_fu_395_p3 = p_read_4_reg_620[32'd9];

assign p_Result_12_fu_168_p3 = p_read1[32'd3];

assign p_Result_13_fu_442_p3 = p_read_3_reg_614[32'd9];

assign p_Result_14_fu_248_p3 = p_read2[32'd3];

assign p_Result_15_fu_489_p3 = p_read_2_reg_608[32'd9];

assign p_Result_16_fu_328_p3 = p_read3[32'd3];

assign p_Result_17_fu_536_p3 = p_read_1_reg_602[32'd9];

assign p_Result_3_fu_160_p3 = p_read1[32'd4];

assign p_Result_6_fu_240_p3 = p_read2[32'd4];

assign p_Result_9_fu_320_p3 = p_read3[32'd4];

assign p_Result_s_fu_80_p3 = p_read[32'd4];

assign p_Val2_1_fu_122_p2 = (p_Val2_s_fu_70_p4 + zext_ln377_fu_118_p1);

assign p_Val2_2_fu_150_p4 = {{p_read1[9:4]}};

assign p_Val2_3_fu_202_p2 = (p_Val2_2_fu_150_p4 + zext_ln377_1_fu_198_p1);

assign p_Val2_4_fu_230_p4 = {{p_read2[9:4]}};

assign p_Val2_5_fu_282_p2 = (p_Val2_4_fu_230_p4 + zext_ln377_2_fu_278_p1);

assign p_Val2_6_fu_310_p4 = {{p_read3[9:4]}};

assign p_Val2_7_fu_362_p2 = (p_Val2_6_fu_310_p4 + zext_ln377_3_fu_358_p1);

assign p_Val2_s_fu_70_p4 = {{p_read[9:4]}};

assign r_1_fu_180_p2 = ((trunc_ln828_1_fu_176_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_2_fu_260_p2 = ((trunc_ln828_2_fu_256_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_3_fu_340_p2 = ((trunc_ln828_3_fu_336_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_fu_100_p2 = ((trunc_ln828_fu_96_p1 != 3'd0) ? 1'b1 : 1'b0);

assign select_ln1649_1_fu_476_p3 = ((icmp_ln1649_1_fu_437_p2[0:0] == 1'b1) ? select_ln302_1_fu_469_p3 : 6'd0);

assign select_ln1649_2_fu_523_p3 = ((icmp_ln1649_2_fu_484_p2[0:0] == 1'b1) ? select_ln302_2_fu_516_p3 : 6'd0);

assign select_ln1649_3_fu_570_p3 = ((icmp_ln1649_3_fu_531_p2[0:0] == 1'b1) ? select_ln302_3_fu_563_p3 : 6'd0);

assign select_ln1649_fu_429_p3 = ((icmp_ln1649_fu_390_p2[0:0] == 1'b1) ? select_ln302_fu_422_p3 : 6'd0);

assign select_ln302_1_fu_469_p3 = ((deleted_zeros_1_fu_462_p3[0:0] == 1'b1) ? p_Val2_3_reg_643 : 6'd63);

assign select_ln302_2_fu_516_p3 = ((deleted_zeros_2_fu_509_p3[0:0] == 1'b1) ? p_Val2_5_reg_660 : 6'd63);

assign select_ln302_3_fu_563_p3 = ((deleted_zeros_3_fu_556_p3[0:0] == 1'b1) ? p_Val2_7_reg_677 : 6'd63);

assign select_ln302_fu_422_p3 = ((deleted_zeros_fu_415_p3[0:0] == 1'b1) ? p_Val2_1_reg_626 : 6'd63);

assign select_ln888_1_fu_456_p3 = ((tmp_6_fu_449_p3[0:0] == 1'b1) ? Range1_all_zeros_1_reg_654 : Range1_all_ones_1_reg_649);

assign select_ln888_2_fu_503_p3 = ((tmp_10_fu_496_p3[0:0] == 1'b1) ? Range1_all_zeros_2_reg_671 : Range1_all_ones_2_reg_666);

assign select_ln888_3_fu_550_p3 = ((tmp_14_fu_543_p3[0:0] == 1'b1) ? Range1_all_zeros_3_reg_688 : Range1_all_ones_3_reg_683);

assign select_ln888_fu_409_p3 = ((tmp_fu_402_p3[0:0] == 1'b1) ? Range1_all_zeros_reg_637 : Range1_all_ones_reg_632);

assign tmp_10_fu_496_p3 = p_Val2_5_reg_660[32'd5];

assign tmp_14_fu_543_p3 = p_Val2_7_reg_677[32'd5];

assign tmp_1_fu_208_p4 = {{p_read1[15:10]}};

assign tmp_2_fu_288_p4 = {{p_read2[15:10]}};

assign tmp_3_fu_368_p4 = {{p_read3[15:10]}};

assign tmp_6_fu_449_p3 = p_Val2_3_reg_643[32'd5];

assign tmp_fu_402_p3 = p_Val2_1_reg_626[32'd5];

assign tmp_s_fu_128_p4 = {{p_read[15:10]}};

assign trunc_ln828_1_fu_176_p1 = p_read1[2:0];

assign trunc_ln828_2_fu_256_p1 = p_read2[2:0];

assign trunc_ln828_3_fu_336_p1 = p_read3[2:0];

assign trunc_ln828_fu_96_p1 = p_read[2:0];

assign zext_ln377_1_fu_198_p1 = and_ln374_1_fu_192_p2;

assign zext_ln377_2_fu_278_p1 = and_ln374_2_fu_272_p2;

assign zext_ln377_3_fu_358_p1 = and_ln374_3_fu_352_p2;

assign zext_ln377_fu_118_p1 = and_ln374_fu_112_p2;

endmodule //alveo_hls4ml_relu_ap_fixed_16_6_5_3_0_ap_ufixed_6_0_4_0_0_relu_config4_s
