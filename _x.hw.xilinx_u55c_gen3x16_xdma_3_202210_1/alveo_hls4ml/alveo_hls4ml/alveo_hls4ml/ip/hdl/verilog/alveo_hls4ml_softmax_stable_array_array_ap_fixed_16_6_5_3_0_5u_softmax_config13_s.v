// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer11_out_dout,
        layer11_out_num_data_valid,
        layer11_out_fifo_cap,
        layer11_out_empty_n,
        layer11_out_read,
        output_r_din,
        output_r_num_data_valid,
        output_r_fifo_cap,
        output_r_full_n,
        output_r_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [79:0] layer11_out_dout;
input  [1:0] layer11_out_num_data_valid;
input  [1:0] layer11_out_fifo_cap;
input   layer11_out_empty_n;
output   layer11_out_read;
output  [79:0] output_r_din;
input  [1:0] output_r_num_data_valid;
input  [1:0] output_r_fifo_cap;
input   output_r_full_n;
output   output_r_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer11_out_read;
reg output_r_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [17:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [17:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [17:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [17:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [17:0] exp_table_q4;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg    layer11_out_blk_n;
reg    output_r_blk_n;
wire    ap_CS_fsm_state8;
wire  signed [15:0] trunc_ln199_fu_288_p1;
reg  signed [15:0] trunc_ln199_reg_901;
wire  signed [15:0] trunc_ln199_3_fu_292_p4;
reg  signed [15:0] trunc_ln199_3_reg_907;
reg  signed [15:0] trunc_ln199_4_reg_913;
wire  signed [15:0] tmp_fu_312_p4;
reg  signed [15:0] tmp_reg_920;
wire  signed [15:0] tmp_s_fu_322_p4;
reg  signed [15:0] tmp_s_reg_926;
wire   [0:0] icmp_ln1651_fu_332_p2;
reg   [0:0] icmp_ln1651_reg_932;
wire   [0:0] icmp_ln1651_1_fu_338_p2;
reg   [0:0] icmp_ln1651_1_reg_937;
wire   [15:0] x_max_V_fu_397_p3;
reg   [15:0] x_max_V_reg_942;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg  signed [17:0] r_V_reg_972;
wire    ap_CS_fsm_state4;
reg  signed [17:0] r_V_1_reg_978;
reg  signed [17:0] r_V_2_reg_984;
reg  signed [17:0] r_V_3_reg_989;
reg  signed [17:0] r_V_4_reg_994;
wire   [17:0] add_ln813_2_fu_783_p2;
reg   [17:0] add_ln813_2_reg_999;
wire    ap_CS_fsm_state5;
reg   [17:0] inv_exp_sum_V_reg_1009;
wire    ap_CS_fsm_state6;
reg   [15:0] trunc_ln2_reg_1014;
wire    ap_CS_fsm_state7;
reg   [15:0] trunc_ln818_1_reg_1019;
reg   [15:0] trunc_ln818_2_reg_1024;
reg   [15:0] tmp_1_reg_1029;
reg   [15:0] tmp_2_reg_1034;
wire   [63:0] zext_ln225_fu_648_p1;
wire   [63:0] zext_ln225_1_fu_679_p1;
wire   [63:0] zext_ln225_2_fu_710_p1;
wire   [63:0] zext_ln225_3_fu_741_p1;
wire   [63:0] zext_ln225_4_fu_772_p1;
wire   [63:0] zext_ln235_fu_808_p1;
reg    ap_block_state1;
wire  signed [17:0] mul_ln1270_4_fu_177_p0;
wire  signed [29:0] sext_ln1273_fu_813_p1;
wire  signed [17:0] mul_ln1270_fu_178_p0;
wire  signed [17:0] mul_ln1270_3_fu_179_p0;
wire  signed [17:0] mul_ln1270_2_fu_180_p0;
wire  signed [17:0] mul_ln1270_1_fu_181_p0;
wire   [0:0] xor_ln1651_fu_344_p2;
wire   [0:0] xor_ln1651_1_fu_355_p2;
wire   [15:0] select_ln65_fu_349_p3;
wire   [15:0] select_ln65_1_fu_360_p3;
wire   [0:0] icmp_ln1651_2_fu_366_p2;
wire   [0:0] xor_ln1651_2_fu_372_p2;
wire   [15:0] select_ln65_2_fu_378_p3;
wire   [0:0] icmp_ln1651_3_fu_386_p2;
wire   [0:0] xor_ln1651_3_fu_391_p2;
wire  signed [16:0] sext_ln1348_fu_404_p1;
wire  signed [16:0] sext_ln1348_1_fu_407_p1;
wire   [16:0] ret_V_fu_410_p2;
wire   [0:0] p_Result_16_fu_416_p3;
wire   [0:0] p_Result_17_fu_424_p3;
wire   [0:0] xor_ln895_fu_432_p2;
wire  signed [16:0] sext_ln1348_2_fu_450_p1;
wire   [16:0] ret_V_1_fu_453_p2;
wire   [0:0] p_Result_18_fu_459_p3;
wire   [0:0] p_Result_19_fu_467_p3;
wire   [0:0] xor_ln895_1_fu_475_p2;
wire  signed [16:0] sext_ln1348_3_fu_493_p1;
wire   [16:0] ret_V_2_fu_496_p2;
wire   [0:0] p_Result_20_fu_502_p3;
wire   [0:0] p_Result_21_fu_510_p3;
wire   [0:0] xor_ln895_2_fu_518_p2;
wire  signed [16:0] sext_ln1348_4_fu_536_p1;
wire   [16:0] ret_V_3_fu_539_p2;
wire   [0:0] p_Result_22_fu_545_p3;
wire   [0:0] p_Result_23_fu_553_p3;
wire   [0:0] xor_ln895_3_fu_561_p2;
wire  signed [16:0] sext_ln1348_5_fu_579_p1;
wire   [16:0] ret_V_4_fu_582_p2;
wire   [0:0] p_Result_24_fu_588_p3;
wire   [0:0] p_Result_25_fu_596_p3;
wire   [0:0] xor_ln895_4_fu_604_p2;
wire   [0:0] overflow_fu_438_p2;
wire   [0:0] xor_ln302_fu_444_p2;
wire   [9:0] select_ln346_fu_622_p3;
wire   [9:0] tmp_3_fu_630_p4;
wire   [9:0] p_Result_s_fu_640_p3;
wire   [0:0] overflow_1_fu_481_p2;
wire   [0:0] xor_ln302_1_fu_487_p2;
wire   [9:0] select_ln346_1_fu_653_p3;
wire   [9:0] tmp_4_fu_661_p4;
wire   [9:0] p_Result_12_fu_671_p3;
wire   [0:0] overflow_2_fu_524_p2;
wire   [0:0] xor_ln302_2_fu_530_p2;
wire   [9:0] select_ln346_2_fu_684_p3;
wire   [9:0] tmp_5_fu_692_p4;
wire   [9:0] p_Result_13_fu_702_p3;
wire   [0:0] overflow_3_fu_567_p2;
wire   [0:0] xor_ln302_3_fu_573_p2;
wire   [9:0] select_ln346_3_fu_715_p3;
wire   [9:0] tmp_6_fu_723_p4;
wire   [9:0] p_Result_14_fu_733_p3;
wire   [0:0] overflow_4_fu_610_p2;
wire   [0:0] xor_ln302_4_fu_616_p2;
wire   [9:0] select_ln346_4_fu_746_p3;
wire   [9:0] tmp_7_fu_754_p4;
wire   [9:0] p_Result_15_fu_764_p3;
wire  signed [17:0] add_ln813_1_fu_777_p0;
wire  signed [17:0] add_ln813_1_fu_777_p1;
wire   [17:0] add_ln813_1_fu_777_p2;
wire  signed [17:0] add_ln813_2_fu_783_p1;
wire   [17:0] add_ln813_fu_789_p2;
wire   [17:0] exp_sum_V_fu_793_p2;
wire   [9:0] p_Result_5_fu_798_p4;
wire   [29:0] mul_ln1270_fu_178_p2;
wire   [29:0] mul_ln1270_3_fu_179_p2;
wire   [29:0] mul_ln1270_4_fu_177_p2;
wire   [29:0] mul_ln1270_2_fu_180_p2;
wire   [29:0] mul_ln1270_1_fu_181_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_exp_tablbkb #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4)
);

alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_invert_tcud #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

alveo_hls4ml_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_18s_18s_30_1_1_U159(
    .din0(mul_ln1270_4_fu_177_p0),
    .din1(r_V_4_reg_994),
    .dout(mul_ln1270_4_fu_177_p2)
);

alveo_hls4ml_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_18s_18s_30_1_1_U160(
    .din0(mul_ln1270_fu_178_p0),
    .din1(r_V_reg_972),
    .dout(mul_ln1270_fu_178_p2)
);

alveo_hls4ml_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_18s_18s_30_1_1_U161(
    .din0(mul_ln1270_3_fu_179_p0),
    .din1(r_V_3_reg_989),
    .dout(mul_ln1270_3_fu_179_p2)
);

alveo_hls4ml_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_18s_18s_30_1_1_U162(
    .din0(mul_ln1270_2_fu_180_p0),
    .din1(r_V_2_reg_984),
    .dout(mul_ln1270_2_fu_180_p2)
);

alveo_hls4ml_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_18s_18s_30_1_1_U163(
    .din0(mul_ln1270_1_fu_181_p0),
    .din1(r_V_1_reg_978),
    .dout(mul_ln1270_1_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln813_2_reg_999 <= add_ln813_2_fu_783_p2;
        r_V_1_reg_978 <= exp_table_q3;
        r_V_2_reg_984 <= exp_table_q2;
        r_V_3_reg_989 <= exp_table_q1;
        r_V_4_reg_994 <= exp_table_q0;
        r_V_reg_972 <= exp_table_q4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1651_1_reg_937 <= icmp_ln1651_1_fu_338_p2;
        icmp_ln1651_reg_932 <= icmp_ln1651_fu_332_p2;
        tmp_reg_920 <= {{layer11_out_dout[31:16]}};
        tmp_s_reg_926 <= {{layer11_out_dout[47:32]}};
        trunc_ln199_3_reg_907 <= {{layer11_out_dout[63:48]}};
        trunc_ln199_4_reg_913 <= {{layer11_out_dout[79:64]}};
        trunc_ln199_reg_901 <= trunc_ln199_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inv_exp_sum_V_reg_1009 <= invert_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_1029 <= {{mul_ln1270_2_fu_180_p2[29:14]}};
        tmp_2_reg_1034 <= {{mul_ln1270_1_fu_181_p2[29:14]}};
        trunc_ln2_reg_1014 <= {{mul_ln1270_fu_178_p2[29:14]}};
        trunc_ln818_1_reg_1019 <= {{mul_ln1270_3_fu_179_p2[29:14]}};
        trunc_ln818_2_reg_1024 <= {{mul_ln1270_4_fu_177_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_max_V_reg_942 <= x_max_V_fu_397_p3;
    end
end

always @ (*) begin
    if (((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((output_r_full_n == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        layer11_out_blk_n = layer11_out_empty_n;
    end else begin
        layer11_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer11_out_read = 1'b1;
    end else begin
        layer11_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_blk_n = output_r_full_n;
    end else begin
        output_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_r_write = 1'b1;
    end else begin
        output_r_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((output_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln813_1_fu_777_p0 = exp_table_q1;

assign add_ln813_1_fu_777_p1 = exp_table_q0;

assign add_ln813_1_fu_777_p2 = ($signed(add_ln813_1_fu_777_p0) + $signed(add_ln813_1_fu_777_p1));

assign add_ln813_2_fu_783_p1 = exp_table_q2;

assign add_ln813_2_fu_783_p2 = ($signed(add_ln813_1_fu_777_p2) + $signed(add_ln813_2_fu_783_p1));

assign add_ln813_fu_789_p2 = ($signed(r_V_1_reg_978) + $signed(r_V_reg_972));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((layer11_out_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign exp_sum_V_fu_793_p2 = (add_ln813_2_reg_999 + add_ln813_fu_789_p2);

assign exp_table_address0 = zext_ln225_4_fu_772_p1;

assign exp_table_address1 = zext_ln225_3_fu_741_p1;

assign exp_table_address2 = zext_ln225_2_fu_710_p1;

assign exp_table_address3 = zext_ln225_1_fu_679_p1;

assign exp_table_address4 = zext_ln225_fu_648_p1;

assign icmp_ln1651_1_fu_338_p2 = (($signed(tmp_s_fu_322_p4) < $signed(trunc_ln199_3_fu_292_p4)) ? 1'b1 : 1'b0);

assign icmp_ln1651_2_fu_366_p2 = (($signed(select_ln65_fu_349_p3) < $signed(select_ln65_1_fu_360_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1651_3_fu_386_p2 = (($signed(select_ln65_2_fu_378_p3) < $signed(trunc_ln199_4_reg_913)) ? 1'b1 : 1'b0);

assign icmp_ln1651_fu_332_p2 = (($signed(trunc_ln199_fu_288_p1) < $signed(tmp_fu_312_p4)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln235_fu_808_p1;

assign mul_ln1270_1_fu_181_p0 = sext_ln1273_fu_813_p1;

assign mul_ln1270_2_fu_180_p0 = sext_ln1273_fu_813_p1;

assign mul_ln1270_3_fu_179_p0 = sext_ln1273_fu_813_p1;

assign mul_ln1270_4_fu_177_p0 = sext_ln1273_fu_813_p1;

assign mul_ln1270_fu_178_p0 = sext_ln1273_fu_813_p1;

assign output_r_din = {{{{{trunc_ln818_2_reg_1024}, {trunc_ln818_1_reg_1019}}, {tmp_1_reg_1029}}, {tmp_2_reg_1034}}, {trunc_ln2_reg_1014}};

assign overflow_1_fu_481_p2 = (xor_ln895_1_fu_475_p2 & p_Result_19_fu_467_p3);

assign overflow_2_fu_524_p2 = (xor_ln895_2_fu_518_p2 & p_Result_21_fu_510_p3);

assign overflow_3_fu_567_p2 = (xor_ln895_3_fu_561_p2 & p_Result_23_fu_553_p3);

assign overflow_4_fu_610_p2 = (xor_ln895_4_fu_604_p2 & p_Result_25_fu_596_p3);

assign overflow_fu_438_p2 = (xor_ln895_fu_432_p2 & p_Result_17_fu_424_p3);

assign p_Result_12_fu_671_p3 = ((xor_ln302_1_fu_487_p2[0:0] == 1'b1) ? select_ln346_1_fu_653_p3 : tmp_4_fu_661_p4);

assign p_Result_13_fu_702_p3 = ((xor_ln302_2_fu_530_p2[0:0] == 1'b1) ? select_ln346_2_fu_684_p3 : tmp_5_fu_692_p4);

assign p_Result_14_fu_733_p3 = ((xor_ln302_3_fu_573_p2[0:0] == 1'b1) ? select_ln346_3_fu_715_p3 : tmp_6_fu_723_p4);

assign p_Result_15_fu_764_p3 = ((xor_ln302_4_fu_616_p2[0:0] == 1'b1) ? select_ln346_4_fu_746_p3 : tmp_7_fu_754_p4);

assign p_Result_16_fu_416_p3 = ret_V_fu_410_p2[32'd16];

assign p_Result_17_fu_424_p3 = ret_V_fu_410_p2[32'd15];

assign p_Result_18_fu_459_p3 = ret_V_1_fu_453_p2[32'd16];

assign p_Result_19_fu_467_p3 = ret_V_1_fu_453_p2[32'd15];

assign p_Result_20_fu_502_p3 = ret_V_2_fu_496_p2[32'd16];

assign p_Result_21_fu_510_p3 = ret_V_2_fu_496_p2[32'd15];

assign p_Result_22_fu_545_p3 = ret_V_3_fu_539_p2[32'd16];

assign p_Result_23_fu_553_p3 = ret_V_3_fu_539_p2[32'd15];

assign p_Result_24_fu_588_p3 = ret_V_4_fu_582_p2[32'd16];

assign p_Result_25_fu_596_p3 = ret_V_4_fu_582_p2[32'd15];

assign p_Result_5_fu_798_p4 = {{exp_sum_V_fu_793_p2[17:8]}};

assign p_Result_s_fu_640_p3 = ((xor_ln302_fu_444_p2[0:0] == 1'b1) ? select_ln346_fu_622_p3 : tmp_3_fu_630_p4);

assign ret_V_1_fu_453_p2 = ($signed(sext_ln1348_2_fu_450_p1) - $signed(sext_ln1348_1_fu_407_p1));

assign ret_V_2_fu_496_p2 = ($signed(sext_ln1348_3_fu_493_p1) - $signed(sext_ln1348_1_fu_407_p1));

assign ret_V_3_fu_539_p2 = ($signed(sext_ln1348_4_fu_536_p1) - $signed(sext_ln1348_1_fu_407_p1));

assign ret_V_4_fu_582_p2 = ($signed(sext_ln1348_5_fu_579_p1) - $signed(sext_ln1348_1_fu_407_p1));

assign ret_V_fu_410_p2 = ($signed(sext_ln1348_fu_404_p1) - $signed(sext_ln1348_1_fu_407_p1));

assign select_ln346_1_fu_653_p3 = ((overflow_1_fu_481_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln346_2_fu_684_p3 = ((overflow_2_fu_524_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln346_3_fu_715_p3 = ((overflow_3_fu_567_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln346_4_fu_746_p3 = ((overflow_4_fu_610_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln346_fu_622_p3 = ((overflow_fu_438_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_360_p3 = ((xor_ln1651_1_fu_355_p2[0:0] == 1'b1) ? tmp_s_reg_926 : trunc_ln199_3_reg_907);

assign select_ln65_2_fu_378_p3 = ((xor_ln1651_2_fu_372_p2[0:0] == 1'b1) ? select_ln65_fu_349_p3 : select_ln65_1_fu_360_p3);

assign select_ln65_fu_349_p3 = ((xor_ln1651_fu_344_p2[0:0] == 1'b1) ? trunc_ln199_reg_901 : tmp_reg_920);

assign sext_ln1273_fu_813_p1 = $signed(inv_exp_sum_V_reg_1009);

assign sext_ln1348_1_fu_407_p1 = $signed(x_max_V_reg_942);

assign sext_ln1348_2_fu_450_p1 = tmp_reg_920;

assign sext_ln1348_3_fu_493_p1 = tmp_s_reg_926;

assign sext_ln1348_4_fu_536_p1 = trunc_ln199_3_reg_907;

assign sext_ln1348_5_fu_579_p1 = trunc_ln199_4_reg_913;

assign sext_ln1348_fu_404_p1 = trunc_ln199_reg_901;

assign tmp_3_fu_630_p4 = {{ret_V_fu_410_p2[15:6]}};

assign tmp_4_fu_661_p4 = {{ret_V_1_fu_453_p2[15:6]}};

assign tmp_5_fu_692_p4 = {{ret_V_2_fu_496_p2[15:6]}};

assign tmp_6_fu_723_p4 = {{ret_V_3_fu_539_p2[15:6]}};

assign tmp_7_fu_754_p4 = {{ret_V_4_fu_582_p2[15:6]}};

assign tmp_fu_312_p4 = {{layer11_out_dout[31:16]}};

assign tmp_s_fu_322_p4 = {{layer11_out_dout[47:32]}};

assign trunc_ln199_3_fu_292_p4 = {{layer11_out_dout[63:48]}};

assign trunc_ln199_fu_288_p1 = layer11_out_dout[15:0];

assign x_max_V_fu_397_p3 = ((xor_ln1651_3_fu_391_p2[0:0] == 1'b1) ? select_ln65_2_fu_378_p3 : trunc_ln199_4_reg_913);

assign xor_ln1651_1_fu_355_p2 = (icmp_ln1651_1_reg_937 ^ 1'd1);

assign xor_ln1651_2_fu_372_p2 = (icmp_ln1651_2_fu_366_p2 ^ 1'd1);

assign xor_ln1651_3_fu_391_p2 = (icmp_ln1651_3_fu_386_p2 ^ 1'd1);

assign xor_ln1651_fu_344_p2 = (icmp_ln1651_reg_932 ^ 1'd1);

assign xor_ln302_1_fu_487_p2 = (p_Result_19_fu_467_p3 ^ p_Result_18_fu_459_p3);

assign xor_ln302_2_fu_530_p2 = (p_Result_21_fu_510_p3 ^ p_Result_20_fu_502_p3);

assign xor_ln302_3_fu_573_p2 = (p_Result_23_fu_553_p3 ^ p_Result_22_fu_545_p3);

assign xor_ln302_4_fu_616_p2 = (p_Result_25_fu_596_p3 ^ p_Result_24_fu_588_p3);

assign xor_ln302_fu_444_p2 = (p_Result_17_fu_424_p3 ^ p_Result_16_fu_416_p3);

assign xor_ln895_1_fu_475_p2 = (p_Result_18_fu_459_p3 ^ 1'd1);

assign xor_ln895_2_fu_518_p2 = (p_Result_20_fu_502_p3 ^ 1'd1);

assign xor_ln895_3_fu_561_p2 = (p_Result_22_fu_545_p3 ^ 1'd1);

assign xor_ln895_4_fu_604_p2 = (p_Result_24_fu_588_p3 ^ 1'd1);

assign xor_ln895_fu_432_p2 = (p_Result_16_fu_416_p3 ^ 1'd1);

assign zext_ln225_1_fu_679_p1 = p_Result_12_fu_671_p3;

assign zext_ln225_2_fu_710_p1 = p_Result_13_fu_702_p3;

assign zext_ln225_3_fu_741_p1 = p_Result_14_fu_733_p3;

assign zext_ln225_4_fu_772_p1 = p_Result_15_fu_764_p3;

assign zext_ln225_fu_648_p1 = p_Result_s_fu_640_p3;

assign zext_ln235_fu_808_p1 = p_Result_5_fu_798_p4;

endmodule //alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s
