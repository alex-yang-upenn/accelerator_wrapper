-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config11_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    i_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    i_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_we0 : OUT STD_LOGIC;
    out_buf_0_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_we0 : OUT STD_LOGIC;
    out_buf_1_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_we0 : OUT STD_LOGIC;
    out_buf_2_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_we0 : OUT STD_LOGIC;
    out_buf_3_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_4_ce0 : OUT STD_LOGIC;
    out_buf_4_we0 : OUT STD_LOGIC;
    out_buf_4_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config11_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_FE49 : STD_LOGIC_VECTOR (15 downto 0) := "1111111001001001";
    constant ap_const_lv17_1FC19 : STD_LOGIC_VECTOR (16 downto 0) := "11111110000011001";
    constant ap_const_lv16_FE46 : STD_LOGIC_VECTOR (15 downto 0) := "1111111001000110";
    constant ap_const_lv16_2BB : STD_LOGIC_VECTOR (15 downto 0) := "0000001010111011";
    constant ap_const_lv17_1FD3D : STD_LOGIC_VECTOR (16 downto 0) := "11111110100111101";
    constant ap_const_lv15_7F37 : STD_LOGIC_VECTOR (14 downto 0) := "111111100110111";
    constant ap_const_lv16_375 : STD_LOGIC_VECTOR (15 downto 0) := "0000001101110101";
    constant ap_const_lv15_7F14 : STD_LOGIC_VECTOR (14 downto 0) := "111111100010100";
    constant ap_const_lv15_187 : STD_LOGIC_VECTOR (14 downto 0) := "000000110000111";
    constant ap_const_lv17_1FDE1 : STD_LOGIC_VECTOR (16 downto 0) := "11111110111100001";
    constant ap_const_lv16_274 : STD_LOGIC_VECTOR (15 downto 0) := "0000001001110100";
    constant ap_const_lv17_1FDAF : STD_LOGIC_VECTOR (16 downto 0) := "11111110110101111";
    constant ap_const_lv17_1FDD7 : STD_LOGIC_VECTOR (16 downto 0) := "11111110111010111";
    constant ap_const_lv14_3F9A : STD_LOGIC_VECTOR (13 downto 0) := "11111110011010";
    constant ap_const_lv17_1FCD9 : STD_LOGIC_VECTOR (16 downto 0) := "11111110011011001";
    constant ap_const_lv16_FE29 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000101001";
    constant ap_const_lv17_1FDBC : STD_LOGIC_VECTOR (16 downto 0) := "11111110110111100";
    constant ap_const_lv15_12C : STD_LOGIC_VECTOR (14 downto 0) := "000000100101100";
    constant ap_const_lv17_1FD79 : STD_LOGIC_VECTOR (16 downto 0) := "11111110101111001";
    constant ap_const_lv15_1AD : STD_LOGIC_VECTOR (14 downto 0) := "000000110101101";
    constant ap_const_lv15_1A5 : STD_LOGIC_VECTOR (14 downto 0) := "000000110100101";
    constant ap_const_lv16_FECB : STD_LOGIC_VECTOR (15 downto 0) := "1111111011001011";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv17_1FD9B : STD_LOGIC_VECTOR (16 downto 0) := "11111110110011011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_1EC : STD_LOGIC_VECTOR (8 downto 0) := "111101100";
    constant ap_const_lv10_3E4 : STD_LOGIC_VECTOR (9 downto 0) := "1111100100";
    constant ap_const_lv11_7EE : STD_LOGIC_VECTOR (10 downto 0) := "11111101110";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv11_7F0 : STD_LOGIC_VECTOR (10 downto 0) := "11111110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_read_11_reg_3547 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_12_reg_3554 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read_13_reg_3560 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read_14_reg_3568 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read27_reg_3575 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln_reg_3581 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_5_reg_3586 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_6_reg_3591 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_7_reg_3596 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_8_reg_3601 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_9_reg_3606 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln818_s_reg_3611 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1_reg_3616 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_1_reg_3621 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln818_2_reg_3626 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_3_reg_3631 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_4_reg_3636 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_11_reg_3641 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln2_reg_3646 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln818_12_reg_3651 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_13_reg_3656 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_14_reg_3661 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_15_reg_3666 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_16_reg_3671 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_17_reg_3676 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_18_reg_3681 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1273_1_reg_3686 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln818_20_reg_3691 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_10_fu_3257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln813_10_reg_3696 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_read_reg_3701 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4_fu_3368_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_4_reg_3706 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_9_fu_3410_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_9_reg_3711 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_14_fu_3449_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_14_reg_3716 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_19_fu_3491_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_19_reg_3721 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_24_fu_3533_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_24_reg_3726 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln66_fu_3539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_16_fu_235_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_16_fu_235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_17_fu_236_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_17_fu_236_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_13_fu_237_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_13_fu_237_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln818_1_fu_238_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln818_fu_3075_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln818_1_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_12_fu_239_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1273_7_fu_3136_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_12_fu_239_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_8_fu_240_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1273_3_fu_3002_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_8_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln818_fu_241_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1273_2_fu_2997_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln818_fu_241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_7_fu_242_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_7_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln818_5_fu_243_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln818_4_fu_3211_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln818_5_fu_243_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_10_fu_244_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_10_fu_244_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln818_3_fu_245_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_3_fu_245_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_15_fu_246_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_15_fu_246_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_4_fu_247_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1273_1_fu_2940_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_4_fu_247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_6_fu_248_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_6_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3_fu_249_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_3_fu_249_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_250_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_2_fu_250_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_11_fu_251_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_11_fu_251_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln818_7_fu_252_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_7_fu_252_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_14_fu_253_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_14_fu_253_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln818_6_fu_254_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_6_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln818_4_fu_255_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_4_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_9_fu_256_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_9_fu_256_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln818_2_fu_257_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_2_fu_257_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_5_fu_258_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_5_fu_258_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_259_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_259_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_249_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_4_fu_247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_5_fu_258_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_248_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_7_fu_242_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln818_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_240_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_9_fu_256_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_244_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln818_1_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln818_2_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln818_10_fu_3098_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln818_3_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln818_4_fu_255_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_11_fu_251_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_12_fu_239_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_13_fu_237_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_14_fu_253_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_15_fu_246_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_16_fu_235_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln818_5_fu_243_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln818_6_fu_254_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln818_7_fu_252_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_17_fu_236_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln818_19_fu_3227_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln818_5_fu_3108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln818_1_fu_3293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_6_fu_3305_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_fu_3332_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_1_fu_3338_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1273_fu_3263_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1273_4_fu_3278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln813_2_fu_3348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln813_2_fu_3354_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln818_2_fu_3320_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_3_fu_3358_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln813_3_fu_3364_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_1_fu_3342_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln818_7_fu_3323_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_7_fu_3308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_5_fu_3374_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_4_fu_3380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln818_3_fu_3296_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln818_fu_3281_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln813_7_fu_3390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln813_5_fu_3396_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1273_1_fu_3266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_8_fu_3400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln813_6_fu_3406_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_6_fu_3384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_fu_3416_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1273_10_fu_3284_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_11_fu_3419_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1273_8_fu_3311_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_12_fu_3429_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln813_7_fu_3435_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_2_fu_3269_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_13_fu_3439_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_8_fu_3445_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_1_fu_3425_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1273_11_fu_3326_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_3_fu_3272_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_15_fu_3455_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln818_6_fu_3299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_16_fu_3461_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_5_fu_3287_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln813_17_fu_3471_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln813_10_fu_3477_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_9_fu_3314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_18_fu_3481_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_11_fu_3487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln813_9_fu_3467_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_fu_3275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln70_2_fu_3317_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_20_fu_3497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_12_fu_3503_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln70_fu_3302_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_1_fu_3290_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_22_fu_3513_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln813_13_fu_3519_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_fu_3329_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_23_fu_3523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_14_fu_3529_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_21_fu_3507_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln818_2_fu_257_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln818_4_fu_255_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_10_fu_244_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_13_fu_237_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_fu_235_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_fu_236_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_fu_250_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_248_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component alveo_hls4ml_mul_6ns_10s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_11s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_11ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_9s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_8s_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_7ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mul_6ns_10s_16_1_1_U58 : component alveo_hls4ml_mul_6ns_10s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => r_V_16_fu_235_p0,
        din1 => r_V_16_fu_235_p1,
        dout => r_V_16_fu_235_p2);

    mul_6ns_11s_17_1_1_U59 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_17_fu_236_p0,
        din1 => r_V_17_fu_236_p1,
        dout => r_V_17_fu_236_p2);

    mul_6ns_10s_16_1_1_U60 : component alveo_hls4ml_mul_6ns_10s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => r_V_13_fu_237_p0,
        din1 => r_V_13_fu_237_p1,
        dout => r_V_13_fu_237_p2);

    mul_6ns_11ns_16_1_1_U61 : component alveo_hls4ml_mul_6ns_11ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln818_1_fu_238_p0,
        din1 => mul_ln818_1_fu_238_p1,
        dout => mul_ln818_1_fu_238_p2);

    mul_6ns_11s_17_1_1_U62 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_12_fu_239_p0,
        din1 => r_V_12_fu_239_p1,
        dout => r_V_12_fu_239_p2);

    mul_6ns_9s_15_1_1_U63 : component alveo_hls4ml_mul_6ns_9s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => r_V_8_fu_240_p0,
        din1 => r_V_8_fu_240_p1,
        dout => r_V_8_fu_240_p2);

    mul_6ns_11ns_16_1_1_U64 : component alveo_hls4ml_mul_6ns_11ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln818_fu_241_p0,
        din1 => mul_ln818_fu_241_p1,
        dout => mul_ln818_fu_241_p2);

    mul_6ns_9s_15_1_1_U65 : component alveo_hls4ml_mul_6ns_9s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => r_V_7_fu_242_p0,
        din1 => r_V_7_fu_242_p1,
        dout => r_V_7_fu_242_p2);

    mul_6ns_10ns_15_1_1_U66 : component alveo_hls4ml_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln818_5_fu_243_p0,
        din1 => mul_ln818_5_fu_243_p1,
        dout => mul_ln818_5_fu_243_p2);

    mul_6ns_11s_17_1_1_U67 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_10_fu_244_p0,
        din1 => r_V_10_fu_244_p1,
        dout => r_V_10_fu_244_p2);

    mul_6ns_11ns_16_1_1_U68 : component alveo_hls4ml_mul_6ns_11ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln818_3_fu_245_p0,
        din1 => mul_ln818_3_fu_245_p1,
        dout => mul_ln818_3_fu_245_p2);

    mul_6ns_11s_17_1_1_U69 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_15_fu_246_p0,
        din1 => r_V_15_fu_246_p1,
        dout => r_V_15_fu_246_p2);

    mul_6ns_11s_17_1_1_U70 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_4_fu_247_p0,
        din1 => r_V_4_fu_247_p1,
        dout => r_V_4_fu_247_p2);

    mul_6ns_8s_14_1_1_U71 : component alveo_hls4ml_mul_6ns_8s_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        din0 => r_V_6_fu_248_p0,
        din1 => r_V_6_fu_248_p1,
        dout => r_V_6_fu_248_p2);

    mul_6ns_11s_17_1_1_U72 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_3_fu_249_p0,
        din1 => r_V_3_fu_249_p1,
        dout => r_V_3_fu_249_p2);

    mul_6ns_10s_16_1_1_U73 : component alveo_hls4ml_mul_6ns_10s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => r_V_2_fu_250_p0,
        din1 => r_V_2_fu_250_p1,
        dout => r_V_2_fu_250_p2);

    mul_6ns_11s_17_1_1_U74 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_11_fu_251_p0,
        din1 => r_V_11_fu_251_p1,
        dout => r_V_11_fu_251_p2);

    mul_6ns_10ns_15_1_1_U75 : component alveo_hls4ml_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln818_7_fu_252_p0,
        din1 => mul_ln818_7_fu_252_p1,
        dout => mul_ln818_7_fu_252_p2);

    mul_6ns_11s_17_1_1_U76 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_14_fu_253_p0,
        din1 => r_V_14_fu_253_p1,
        dout => r_V_14_fu_253_p2);

    mul_6ns_10ns_15_1_1_U77 : component alveo_hls4ml_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln818_6_fu_254_p0,
        din1 => mul_ln818_6_fu_254_p1,
        dout => mul_ln818_6_fu_254_p2);

    mul_6ns_10ns_15_1_1_U78 : component alveo_hls4ml_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln818_4_fu_255_p0,
        din1 => mul_ln818_4_fu_255_p1,
        dout => mul_ln818_4_fu_255_p2);

    mul_6ns_10s_16_1_1_U79 : component alveo_hls4ml_mul_6ns_10s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => r_V_9_fu_256_p0,
        din1 => r_V_9_fu_256_p1,
        dout => r_V_9_fu_256_p2);

    mul_6ns_7ns_12_1_1_U80 : component alveo_hls4ml_mul_6ns_7ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln818_2_fu_257_p0,
        din1 => mul_ln818_2_fu_257_p1,
        dout => mul_ln818_2_fu_257_p2);

    mul_6ns_11s_17_1_1_U81 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_5_fu_258_p0,
        din1 => r_V_5_fu_258_p1,
        dout => r_V_5_fu_258_p2);

    mul_6ns_11s_17_1_1_U82 : component alveo_hls4ml_mul_6ns_11s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => r_V_fu_259_p0,
        din1 => r_V_fu_259_p1,
        dout => r_V_fu_259_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln813_10_reg_3696 <= add_ln813_10_fu_3257_p2;
                p_read27_reg_3575 <= p_read;
                p_read_11_reg_3547 <= p_read4;
                p_read_12_reg_3554 <= p_read3;
                p_read_13_reg_3560 <= p_read2;
                p_read_14_reg_3568 <= p_read1;
                trunc_ln1273_1_reg_3686 <= mul_ln818_7_fu_252_p2(14 downto 6);
                trunc_ln1_reg_3616 <= mul_ln818_fu_241_p2(15 downto 6);
                trunc_ln2_reg_3646 <= mul_ln818_4_fu_255_p2(14 downto 6);
                trunc_ln818_11_reg_3641 <= mul_ln818_3_fu_245_p2(15 downto 6);
                trunc_ln818_12_reg_3651 <= r_V_11_fu_251_p2(16 downto 6);
                trunc_ln818_13_reg_3656 <= r_V_12_fu_239_p2(16 downto 6);
                trunc_ln818_14_reg_3661 <= r_V_13_fu_237_p2(15 downto 6);
                trunc_ln818_15_reg_3666 <= r_V_14_fu_253_p2(16 downto 6);
                trunc_ln818_16_reg_3671 <= r_V_15_fu_246_p2(16 downto 6);
                trunc_ln818_17_reg_3676 <= r_V_16_fu_235_p2(15 downto 6);
                trunc_ln818_18_reg_3681 <= mul_ln818_5_fu_243_p2(14 downto 6);
                trunc_ln818_1_reg_3621 <= r_V_8_fu_240_p2(14 downto 6);
                trunc_ln818_20_reg_3691 <= r_V_17_fu_236_p2(16 downto 6);
                trunc_ln818_2_reg_3626 <= r_V_9_fu_256_p2(15 downto 6);
                trunc_ln818_3_reg_3631 <= r_V_10_fu_244_p2(16 downto 6);
                trunc_ln818_4_reg_3636 <= mul_ln818_1_fu_238_p2(15 downto 6);
                trunc_ln818_5_reg_3586 <= r_V_2_fu_250_p2(15 downto 6);
                trunc_ln818_6_reg_3591 <= r_V_3_fu_249_p2(16 downto 6);
                trunc_ln818_7_reg_3596 <= r_V_4_fu_247_p2(16 downto 6);
                trunc_ln818_8_reg_3601 <= r_V_5_fu_258_p2(16 downto 6);
                trunc_ln818_9_reg_3606 <= r_V_6_fu_248_p2(13 downto 6);
                trunc_ln818_s_reg_3611 <= r_V_7_fu_242_p2(14 downto 6);
                trunc_ln_reg_3581 <= r_V_fu_259_p2(16 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln813_14_reg_3716 <= add_ln813_14_fu_3449_p2;
                add_ln813_19_reg_3721 <= add_ln813_19_fu_3491_p2;
                add_ln813_24_reg_3726 <= add_ln813_24_fu_3533_p2;
                add_ln813_4_reg_3706 <= add_ln813_4_fu_3368_p2;
                add_ln813_9_reg_3711 <= add_ln813_9_fu_3410_p2;
                i_read_reg_3701 <= i_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_10_fu_3257_p2 <= std_logic_vector(unsigned(trunc_ln818_19_fu_3227_p4) + unsigned(zext_ln818_5_fu_3108_p1));
    add_ln813_11_fu_3419_p2 <= std_logic_vector(unsigned(zext_ln813_fu_3416_p1) + unsigned(zext_ln1273_10_fu_3284_p1));
    add_ln813_12_fu_3429_p2 <= std_logic_vector(signed(sext_ln1273_8_fu_3311_p1) + signed(ap_const_lv11_7EE));
    add_ln813_13_fu_3439_p2 <= std_logic_vector(signed(sext_ln813_7_fu_3435_p1) + signed(sext_ln1273_2_fu_3269_p1));
    add_ln813_14_fu_3449_p2 <= std_logic_vector(signed(sext_ln813_8_fu_3445_p1) + signed(zext_ln813_1_fu_3425_p1));
    add_ln813_15_fu_3455_p2 <= std_logic_vector(unsigned(zext_ln1273_11_fu_3326_p1) + unsigned(sext_ln1273_3_fu_3272_p1));
    add_ln813_16_fu_3461_p2 <= std_logic_vector(unsigned(add_ln813_15_fu_3455_p2) + unsigned(zext_ln818_6_fu_3299_p1));
    add_ln813_17_fu_3471_p2 <= std_logic_vector(signed(sext_ln1273_5_fu_3287_p1) + signed(ap_const_lv10_3E8));
    add_ln813_18_fu_3481_p2 <= std_logic_vector(signed(sext_ln813_10_fu_3477_p1) + signed(sext_ln1273_9_fu_3314_p1));
    add_ln813_19_fu_3491_p2 <= std_logic_vector(signed(sext_ln813_11_fu_3487_p1) + signed(sext_ln813_9_fu_3467_p1));
    add_ln813_1_fu_3342_p2 <= std_logic_vector(signed(sext_ln813_1_fu_3338_p1) + signed(sext_ln1273_fu_3263_p1));
    add_ln813_20_fu_3497_p2 <= std_logic_vector(signed(sext_ln70_fu_3275_p1) + signed(sext_ln70_2_fu_3317_p1));
    add_ln813_21_fu_3507_p2 <= std_logic_vector(signed(sext_ln813_12_fu_3503_p1) + signed(zext_ln70_fu_3302_p1));
    add_ln813_22_fu_3513_p2 <= std_logic_vector(signed(sext_ln70_1_fu_3290_p1) + signed(ap_const_lv11_7F0));
    add_ln813_23_fu_3523_p2 <= std_logic_vector(signed(sext_ln813_13_fu_3519_p1) + signed(sext_ln813_fu_3329_p1));
    add_ln813_24_fu_3533_p2 <= std_logic_vector(signed(sext_ln813_14_fu_3529_p1) + signed(add_ln813_21_fu_3507_p2));
    add_ln813_2_fu_3348_p2 <= std_logic_vector(signed(sext_ln1273_4_fu_3278_p1) + signed(ap_const_lv9_1EC));
    add_ln813_3_fu_3358_p2 <= std_logic_vector(signed(sext_ln813_2_fu_3354_p1) + signed(sext_ln818_2_fu_3320_p1));
    add_ln813_4_fu_3368_p2 <= std_logic_vector(signed(sext_ln813_3_fu_3364_p1) + signed(add_ln813_1_fu_3342_p2));
    add_ln813_5_fu_3374_p2 <= std_logic_vector(unsigned(zext_ln818_7_fu_3323_p1) + unsigned(sext_ln1273_7_fu_3308_p1));
    add_ln813_6_fu_3384_p2 <= std_logic_vector(signed(sext_ln813_4_fu_3380_p1) + signed(zext_ln818_3_fu_3296_p1));
    add_ln813_7_fu_3390_p2 <= std_logic_vector(signed(sext_ln818_fu_3281_p1) + signed(ap_const_lv10_3E4));
    add_ln813_8_fu_3400_p2 <= std_logic_vector(signed(sext_ln813_5_fu_3396_p1) + signed(sext_ln1273_1_fu_3266_p1));
    add_ln813_9_fu_3410_p2 <= std_logic_vector(signed(sext_ln813_6_fu_3406_p1) + signed(add_ln813_6_fu_3384_p2));
    add_ln813_fu_3332_p2 <= std_logic_vector(signed(sext_ln818_1_fu_3293_p1) + signed(sext_ln1273_6_fu_3305_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_done_reg, i_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((i_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_done_reg, i_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((i_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(i_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (i_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, i_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln818_1_fu_238_p0 <= zext_ln818_fu_3075_p1(6 - 1 downto 0);
    mul_ln818_1_fu_238_p1 <= ap_const_lv16_2BB(11 - 1 downto 0);
    mul_ln818_2_fu_257_p0 <= mul_ln818_2_fu_257_p00(6 - 1 downto 0);
    mul_ln818_2_fu_257_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_3560),12));
    mul_ln818_2_fu_257_p1 <= ap_const_lv12_37(7 - 1 downto 0);
    mul_ln818_3_fu_245_p0 <= zext_ln818_fu_3075_p1(6 - 1 downto 0);
    mul_ln818_3_fu_245_p1 <= ap_const_lv16_274(11 - 1 downto 0);
    mul_ln818_4_fu_255_p0 <= mul_ln818_4_fu_255_p00(6 - 1 downto 0);
    mul_ln818_4_fu_255_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_3560),15));
    mul_ln818_4_fu_255_p1 <= ap_const_lv15_1A5(10 - 1 downto 0);
    mul_ln818_5_fu_243_p0 <= zext_ln818_4_fu_3211_p1(6 - 1 downto 0);
    mul_ln818_5_fu_243_p1 <= ap_const_lv15_187(10 - 1 downto 0);
    mul_ln818_6_fu_254_p0 <= zext_ln818_4_fu_3211_p1(6 - 1 downto 0);
    mul_ln818_6_fu_254_p1 <= ap_const_lv15_1AD(10 - 1 downto 0);
    mul_ln818_7_fu_252_p0 <= zext_ln818_4_fu_3211_p1(6 - 1 downto 0);
    mul_ln818_7_fu_252_p1 <= ap_const_lv15_12C(10 - 1 downto 0);
    mul_ln818_fu_241_p0 <= zext_ln1273_2_fu_2997_p1(6 - 1 downto 0);
    mul_ln818_fu_241_p1 <= ap_const_lv16_375(11 - 1 downto 0);
    out_buf_0_address0 <= zext_ln66_fu_3539_p1(13 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_d0 <= add_ln813_4_reg_3706;

    out_buf_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_0_we0 <= ap_const_logic_1;
        else 
            out_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_address0 <= zext_ln66_fu_3539_p1(13 - 1 downto 0);

    out_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_d0 <= add_ln813_9_reg_3711;

    out_buf_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_1_we0 <= ap_const_logic_1;
        else 
            out_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_address0 <= zext_ln66_fu_3539_p1(13 - 1 downto 0);

    out_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_d0 <= add_ln813_14_reg_3716;

    out_buf_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_2_we0 <= ap_const_logic_1;
        else 
            out_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_address0 <= zext_ln66_fu_3539_p1(13 - 1 downto 0);

    out_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_d0 <= add_ln813_19_reg_3721;

    out_buf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_3_we0 <= ap_const_logic_1;
        else 
            out_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_address0 <= zext_ln66_fu_3539_p1(13 - 1 downto 0);

    out_buf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_4_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_d0 <= add_ln813_24_reg_3726;

    out_buf_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_4_we0 <= ap_const_logic_1;
        else 
            out_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_10_fu_244_p0 <= r_V_10_fu_244_p00(6 - 1 downto 0);
    r_V_10_fu_244_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_3560),17));
    r_V_10_fu_244_p1 <= ap_const_lv17_1FDE1(11 - 1 downto 0);
    r_V_11_fu_251_p0 <= zext_ln1273_7_fu_3136_p1(6 - 1 downto 0);
    r_V_11_fu_251_p1 <= ap_const_lv17_1FDBC(11 - 1 downto 0);
    r_V_12_fu_239_p0 <= zext_ln1273_7_fu_3136_p1(6 - 1 downto 0);
    r_V_12_fu_239_p1 <= ap_const_lv17_1FD3D(11 - 1 downto 0);
    r_V_13_fu_237_p0 <= r_V_13_fu_237_p00(6 - 1 downto 0);
    r_V_13_fu_237_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_12_reg_3554),16));
    r_V_13_fu_237_p1 <= ap_const_lv16_FE46(10 - 1 downto 0);
    r_V_14_fu_253_p0 <= zext_ln1273_7_fu_3136_p1(6 - 1 downto 0);
    r_V_14_fu_253_p1 <= ap_const_lv17_1FD79(11 - 1 downto 0);
    r_V_15_fu_246_p0 <= zext_ln1273_7_fu_3136_p1(6 - 1 downto 0);
    r_V_15_fu_246_p1 <= ap_const_lv17_1FDAF(11 - 1 downto 0);
    r_V_16_fu_235_p0 <= r_V_16_fu_235_p00(6 - 1 downto 0);
    r_V_16_fu_235_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_11_reg_3547),16));
    r_V_16_fu_235_p1 <= ap_const_lv16_FE49(10 - 1 downto 0);
    r_V_17_fu_236_p0 <= r_V_17_fu_236_p00(6 - 1 downto 0);
    r_V_17_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_11_reg_3547),17));
    r_V_17_fu_236_p1 <= ap_const_lv17_1FC19(11 - 1 downto 0);
    r_V_2_fu_250_p0 <= r_V_2_fu_250_p00(6 - 1 downto 0);
    r_V_2_fu_250_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read27_reg_3575),16));
    r_V_2_fu_250_p1 <= ap_const_lv16_FE29(10 - 1 downto 0);
    r_V_3_fu_249_p0 <= zext_ln1273_1_fu_2940_p1(6 - 1 downto 0);
    r_V_3_fu_249_p1 <= ap_const_lv17_1FCD9(11 - 1 downto 0);
    r_V_4_fu_247_p0 <= zext_ln1273_1_fu_2940_p1(6 - 1 downto 0);
    r_V_4_fu_247_p1 <= ap_const_lv17_1FDD7(11 - 1 downto 0);
    r_V_5_fu_258_p0 <= zext_ln1273_1_fu_2940_p1(6 - 1 downto 0);
    r_V_5_fu_258_p1 <= ap_const_lv17_1FD79(11 - 1 downto 0);
    r_V_6_fu_248_p0 <= r_V_6_fu_248_p00(6 - 1 downto 0);
    r_V_6_fu_248_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_14_reg_3568),14));
    r_V_6_fu_248_p1 <= ap_const_lv14_3F9A(8 - 1 downto 0);
    r_V_7_fu_242_p0 <= zext_ln1273_3_fu_3002_p1(6 - 1 downto 0);
    r_V_7_fu_242_p1 <= ap_const_lv15_7F14(9 - 1 downto 0);
    r_V_8_fu_240_p0 <= zext_ln1273_3_fu_3002_p1(6 - 1 downto 0);
    r_V_8_fu_240_p1 <= ap_const_lv15_7F37(9 - 1 downto 0);
    r_V_9_fu_256_p0 <= zext_ln1273_2_fu_2997_p1(6 - 1 downto 0);
    r_V_9_fu_256_p1 <= ap_const_lv16_FECB(10 - 1 downto 0);
    r_V_fu_259_p0 <= zext_ln1273_1_fu_2940_p1(6 - 1 downto 0);
    r_V_fu_259_p1 <= ap_const_lv17_1FD9B(11 - 1 downto 0);
        sext_ln1273_1_fu_3266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_5_reg_3586),11));

        sext_ln1273_2_fu_3269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_6_reg_3591),12));

        sext_ln1273_3_fu_3272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_7_reg_3596),12));

        sext_ln1273_4_fu_3278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_9_reg_3606),9));

        sext_ln1273_5_fu_3287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_1_reg_3621),10));

        sext_ln1273_6_fu_3305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_12_reg_3651),12));

        sext_ln1273_7_fu_3308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_13_reg_3656),12));

        sext_ln1273_8_fu_3311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_14_reg_3661),11));

        sext_ln1273_9_fu_3314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_15_reg_3666),12));

        sext_ln1273_fu_3263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_3581),13));

        sext_ln70_1_fu_3290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_2_reg_3626),11));

        sext_ln70_2_fu_3317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_16_reg_3671),12));

        sext_ln70_fu_3275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_8_reg_3601),12));

        sext_ln813_10_fu_3477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_17_fu_3471_p2),12));

        sext_ln813_11_fu_3487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_18_fu_3481_p2),13));

        sext_ln813_12_fu_3503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_20_fu_3497_p2),13));

        sext_ln813_13_fu_3519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_22_fu_3513_p2),12));

        sext_ln813_14_fu_3529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_23_fu_3523_p2),13));

        sext_ln813_1_fu_3338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_fu_3332_p2),13));

        sext_ln813_2_fu_3354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_2_fu_3348_p2),11));

        sext_ln813_3_fu_3364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_3_fu_3358_p2),13));

        sext_ln813_4_fu_3380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_5_fu_3374_p2),13));

        sext_ln813_5_fu_3396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_7_fu_3390_p2),11));

        sext_ln813_6_fu_3406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_8_fu_3400_p2),13));

        sext_ln813_7_fu_3435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_12_fu_3429_p2),12));

        sext_ln813_8_fu_3445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_13_fu_3439_p2),13));

        sext_ln813_9_fu_3467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_16_fu_3461_p2),13));

        sext_ln813_fu_3329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_20_reg_3691),12));

        sext_ln818_1_fu_3293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_3_reg_3631),12));

        sext_ln818_2_fu_3320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_17_reg_3676),11));

        sext_ln818_fu_3281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_s_reg_3611),10));

    trunc_ln818_10_fu_3098_p4 <= mul_ln818_2_fu_257_p2(11 downto 6);
    trunc_ln818_19_fu_3227_p4 <= mul_ln818_6_fu_254_p2(14 downto 6);
    zext_ln1273_10_fu_3284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_3616),11));
    zext_ln1273_11_fu_3326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1273_1_reg_3686),12));
    zext_ln1273_1_fu_2940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read27_reg_3575),17));
    zext_ln1273_2_fu_2997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_14_reg_3568),16));
    zext_ln1273_3_fu_3002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_14_reg_3568),15));
    zext_ln1273_7_fu_3136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_12_reg_3554),17));
    zext_ln66_fu_3539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_read_reg_3701),64));
    zext_ln70_fu_3302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_3646),13));
    zext_ln813_1_fu_3425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_11_fu_3419_p2),13));
    zext_ln813_fu_3416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_10_reg_3696),11));
    zext_ln818_3_fu_3296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln818_4_reg_3636),13));
    zext_ln818_4_fu_3211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_11_reg_3547),15));
    zext_ln818_5_fu_3108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln818_10_fu_3098_p4),9));
    zext_ln818_6_fu_3299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln818_11_reg_3641),12));
    zext_ln818_7_fu_3323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln818_18_reg_3681),12));
    zext_ln818_fu_3075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_3560),16));
end behav;
