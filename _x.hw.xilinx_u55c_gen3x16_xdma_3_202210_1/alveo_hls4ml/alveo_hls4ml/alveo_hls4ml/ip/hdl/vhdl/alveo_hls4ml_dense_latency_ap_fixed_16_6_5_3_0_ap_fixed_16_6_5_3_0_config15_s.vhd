-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of alveo_hls4ml_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_read921_reg_666 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read517_reg_671 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read416_reg_676 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read12_reg_681 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln818_s_reg_686 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_31_reg_691 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_32_reg_696 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_35_reg_701 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_36_reg_706 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_37_reg_711 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_39_reg_716 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln818_40_reg_721 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_26_fu_538_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_26_reg_726 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_31_fu_584_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_31_reg_731 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shl_ln1273_s_fu_126_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_10_fu_134_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_34_fu_138_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_1_fu_154_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_11_fu_162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_35_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_2_fu_182_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_12_fu_190_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_5_fu_210_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_15_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_39_fu_222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_6_fu_238_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_16_fu_246_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_40_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_7_fu_266_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_17_fu_274_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_41_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_9_fu_294_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_19_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_43_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_10_fu_322_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_20_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_44_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_350_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_367_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1273_3_fu_390_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_13_fu_397_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_37_fu_401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_33_fu_407_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1273_4_fu_421_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_14_fu_428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_38_fu_432_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_34_fu_438_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1273_8_fu_461_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1273_18_fu_468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_42_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_38_fu_478_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln70_15_fu_492_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln70_13_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_fu_498_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_8_fu_504_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_14_fu_488_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_23_fu_508_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_12_fu_455_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln70_11_fu_452_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_24_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_10_fu_524_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_10_fu_448_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_25_fu_528_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln813_11_fu_534_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln813_9_fu_514_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln70_6_fu_381_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln70_7_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_27_fu_544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_13_fu_550_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_fu_377_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_28_fu_554_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_8_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_fu_495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_29_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_15_fu_570_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln70_9_fu_417_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_30_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln813_16_fu_580_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln813_14_fu_560_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln813_17_fu_593_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln813_12_fu_590_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln813_32_fu_596_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln68_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_0_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_1_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_2_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_3_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_4_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_5_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_6_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_7_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_8_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_9_preg <= sext_ln68_fu_602_p1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln813_26_reg_726 <= add_ln813_26_fu_538_p2;
                add_ln813_31_reg_731 <= add_ln813_31_fu_584_p2;
                p_read12_reg_681 <= p_read;
                p_read416_reg_676 <= p_read4;
                p_read517_reg_671 <= p_read5;
                p_read921_reg_666 <= p_read9;
                trunc_ln818_31_reg_691 <= r_V_35_fu_166_p2(15 downto 5);
                trunc_ln818_32_reg_696 <= r_V_36_fu_194_p2(15 downto 5);
                trunc_ln818_35_reg_701 <= r_V_39_fu_222_p2(15 downto 5);
                trunc_ln818_36_reg_706 <= r_V_40_fu_250_p2(15 downto 5);
                trunc_ln818_37_reg_711 <= r_V_41_fu_278_p2(15 downto 5);
                trunc_ln818_39_reg_716 <= r_V_43_fu_306_p2(15 downto 5);
                trunc_ln818_40_reg_721 <= r_V_44_fu_334_p2(15 downto 5);
                trunc_ln818_s_reg_686 <= r_V_34_fu_138_p2(15 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_23_fu_508_p2 <= std_logic_vector(signed(sext_ln813_8_fu_504_p1) + signed(sext_ln70_14_fu_488_p1));
    add_ln813_24_fu_518_p2 <= std_logic_vector(signed(sext_ln70_12_fu_455_p1) + signed(sext_ln70_11_fu_452_p1));
    add_ln813_25_fu_528_p2 <= std_logic_vector(signed(sext_ln813_10_fu_524_p1) + signed(sext_ln70_10_fu_448_p1));
    add_ln813_26_fu_538_p2 <= std_logic_vector(signed(sext_ln813_11_fu_534_p1) + signed(sext_ln813_9_fu_514_p1));
    add_ln813_27_fu_544_p2 <= std_logic_vector(signed(sext_ln70_6_fu_381_p1) + signed(sext_ln70_7_fu_384_p1));
    add_ln813_28_fu_554_p2 <= std_logic_vector(signed(sext_ln813_13_fu_550_p1) + signed(sext_ln70_fu_377_p1));
    add_ln813_29_fu_564_p2 <= std_logic_vector(signed(sext_ln70_8_fu_387_p1) + signed(sext_ln813_fu_495_p1));
    add_ln813_30_fu_574_p2 <= std_logic_vector(signed(sext_ln813_15_fu_570_p1) + signed(sext_ln70_9_fu_417_p1));
    add_ln813_31_fu_584_p2 <= std_logic_vector(signed(sext_ln813_16_fu_580_p1) + signed(sext_ln813_14_fu_560_p1));
    add_ln813_32_fu_596_p2 <= std_logic_vector(signed(sext_ln813_17_fu_593_p1) + signed(sext_ln813_12_fu_590_p1));
    add_ln813_fu_498_p2 <= std_logic_vector(signed(sext_ln70_15_fu_492_p1) + signed(sext_ln70_13_fu_458_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_0_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_0 <= sext_ln68_fu_602_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_1_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_1 <= sext_ln68_fu_602_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_2_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_2 <= sext_ln68_fu_602_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_3_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_3 <= sext_ln68_fu_602_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_4_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_4 <= sext_ln68_fu_602_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_5_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_5 <= sext_ln68_fu_602_p1;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_6_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_6 <= sext_ln68_fu_602_p1;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_7_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_7 <= sext_ln68_fu_602_p1;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_8_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_8 <= sext_ln68_fu_602_p1;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln68_fu_602_p1, ap_return_9_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_9 <= sext_ln68_fu_602_p1;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    r_V_34_fu_138_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_10_fu_134_p1));
    r_V_35_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_11_fu_162_p1));
    r_V_36_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_12_fu_190_p1));
    r_V_37_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_13_fu_397_p1));
    r_V_38_fu_432_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_14_fu_428_p1));
    r_V_39_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_15_fu_218_p1));
    r_V_40_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_16_fu_246_p1));
    r_V_41_fu_278_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_17_fu_274_p1));
    r_V_42_fu_472_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_18_fu_468_p1));
    r_V_43_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_19_fu_302_p1));
    r_V_44_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_20_fu_330_p1));
    r_V_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1273_fu_357_p1));
        sext_ln68_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_32_fu_596_p2),16));

        sext_ln70_10_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_34_fu_438_p4),13));

        sext_ln70_11_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_35_reg_701),12));

        sext_ln70_12_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_36_reg_706),12));

        sext_ln70_13_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_37_reg_711),12));

        sext_ln70_14_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_38_fu_478_p4),13));

        sext_ln70_15_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_39_reg_716),12));

        sext_ln70_6_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_s_reg_686),12));

        sext_ln70_7_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_31_reg_691),12));

        sext_ln70_8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_32_reg_696),12));

        sext_ln70_9_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_33_fu_407_p4),13));

        sext_ln70_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_367_p4),13));

        sext_ln813_10_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_24_fu_518_p2),13));

        sext_ln813_11_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_25_fu_528_p2),14));

        sext_ln813_12_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_26_reg_726),15));

        sext_ln813_13_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_27_fu_544_p2),13));

        sext_ln813_14_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_28_fu_554_p2),14));

        sext_ln813_15_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_29_fu_564_p2),13));

        sext_ln813_16_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_30_fu_574_p2),14));

        sext_ln813_17_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_31_reg_731),15));

        sext_ln813_8_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_fu_498_p2),13));

        sext_ln813_9_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln813_23_fu_508_p2),14));

        sext_ln813_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_40_reg_721),12));

    shl_ln1273_10_fu_322_p3 <= (p_read11 & ap_const_lv5_0);
    shl_ln1273_1_fu_154_p3 <= (p_read2 & ap_const_lv5_0);
    shl_ln1273_2_fu_182_p3 <= (p_read3 & ap_const_lv5_0);
    shl_ln1273_3_fu_390_p3 <= (p_read416_reg_676 & ap_const_lv5_0);
    shl_ln1273_4_fu_421_p3 <= (p_read517_reg_671 & ap_const_lv5_0);
    shl_ln1273_5_fu_210_p3 <= (p_read6 & ap_const_lv5_0);
    shl_ln1273_6_fu_238_p3 <= (p_read7 & ap_const_lv5_0);
    shl_ln1273_7_fu_266_p3 <= (p_read8 & ap_const_lv5_0);
    shl_ln1273_8_fu_461_p3 <= (p_read921_reg_666 & ap_const_lv5_0);
    shl_ln1273_9_fu_294_p3 <= (p_read10 & ap_const_lv5_0);
    shl_ln1273_s_fu_126_p3 <= (p_read1 & ap_const_lv5_0);
    shl_ln_fu_350_p3 <= (p_read12_reg_681 & ap_const_lv5_0);
    trunc_ln818_33_fu_407_p4 <= r_V_37_fu_401_p2(15 downto 5);
    trunc_ln818_34_fu_438_p4 <= r_V_38_fu_432_p2(15 downto 5);
    trunc_ln818_38_fu_478_p4 <= r_V_42_fu_472_p2(15 downto 5);
    trunc_ln_fu_367_p4 <= r_V_fu_361_p2(15 downto 5);
    zext_ln1273_10_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_s_fu_126_p3),16));
    zext_ln1273_11_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_1_fu_154_p3),16));
    zext_ln1273_12_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_2_fu_182_p3),16));
    zext_ln1273_13_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_3_fu_390_p3),16));
    zext_ln1273_14_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_4_fu_421_p3),16));
    zext_ln1273_15_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_5_fu_210_p3),16));
    zext_ln1273_16_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_6_fu_238_p3),16));
    zext_ln1273_17_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_7_fu_266_p3),16));
    zext_ln1273_18_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_8_fu_461_p3),16));
    zext_ln1273_19_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_9_fu_294_p3),16));
    zext_ln1273_20_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1273_10_fu_322_p3),16));
    zext_ln1273_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_350_p3),16));
end behav;
