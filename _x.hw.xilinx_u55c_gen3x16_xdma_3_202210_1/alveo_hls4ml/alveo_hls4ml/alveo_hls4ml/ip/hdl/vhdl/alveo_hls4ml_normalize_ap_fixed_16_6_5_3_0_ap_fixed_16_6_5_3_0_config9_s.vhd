-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_normalize_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of alveo_hls4ml_normalize_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv26_42F0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100001011110000";
    constant ap_const_lv26_7D78 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000111110101111000";
    constant ap_const_lv26_3FF8850 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111000100001010000";
    constant ap_const_lv21_7887 : STD_LOGIC_VECTOR (20 downto 0) := "000000111100010000111";
    constant ap_const_lv26_3FF897E : STD_LOGIC_VECTOR (25 downto 0) := "11111111111000100101111110";
    constant ap_const_lv26_2231400 : STD_LOGIC_VECTOR (25 downto 0) := "10001000110001010000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_21C7400 : STD_LOGIC_VECTOR (25 downto 0) := "10000111000111010000000000";
    constant ap_const_lv22_21DC00 : STD_LOGIC_VECTOR (21 downto 0) := "1000011101110000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv26_2908000 : STD_LOGIC_VECTOR (25 downto 0) := "10100100001000000000000000";
    constant ap_const_lv26_6BDC00 : STD_LOGIC_VECTOR (25 downto 0) := "00011010111101110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal mul_ln1347_fu_93_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_reg_217 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln1347_1_fu_96_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_1_reg_221 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_fu_95_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_reg_225 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_1_fu_94_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_1_reg_229 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_2_fu_92_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_2_reg_233 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_read49_reg_376 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read38_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read27_reg_386 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read16_reg_391 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1347_2_fu_92_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln1347_fu_93_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_94_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_1_fu_94_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_95_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_95_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1347_1_fu_96_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_258_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_1_fu_274_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1347_fu_290_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_2_fu_294_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln818_2_fu_300_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_3_fu_314_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_4_fu_330_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln818_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_1_fu_94_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_fu_95_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component alveo_hls4ml_mul_16s_16ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component alveo_hls4ml_mul_10ns_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component alveo_hls4ml_mul_6ns_16ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component alveo_hls4ml_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_16ns_26_1_1_U39 : component alveo_hls4ml_mul_16s_16ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read49_reg_376,
        din1 => mul_ln1347_2_fu_92_p1,
        dout => mul_ln1347_2_fu_92_p2);

    mul_16s_16ns_26_1_1_U40 : component alveo_hls4ml_mul_16s_16ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read_10_reg_396,
        din1 => mul_ln1347_fu_93_p1,
        dout => mul_ln1347_fu_93_p2);

    mul_10ns_16s_26_1_1_U41 : component alveo_hls4ml_mul_10ns_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => r_V_1_fu_94_p0,
        din1 => r_V_1_fu_94_p1,
        dout => r_V_1_fu_94_p2);

    mul_6ns_16ns_21_1_1_U42 : component alveo_hls4ml_mul_6ns_16ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        din0 => r_V_fu_95_p0,
        din1 => r_V_fu_95_p1,
        dout => r_V_fu_95_p2);

    mul_16s_16s_26_1_1_U43 : component alveo_hls4ml_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => p_read16_reg_391,
        din1 => mul_ln1347_1_fu_96_p1,
        dout => mul_ln1347_1_fu_96_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_0_preg <= ret_V_fu_258_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_1_preg <= ret_V_1_fu_274_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_2_preg <= sext_ln818_fu_310_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_3_preg <= ret_V_3_fu_314_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv16_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_return_4_preg <= ret_V_4_fu_330_p2(25 downto 10);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1347_1_reg_221 <= mul_ln1347_1_fu_96_p2;
                mul_ln1347_2_reg_233 <= mul_ln1347_2_fu_92_p2;
                mul_ln1347_reg_217 <= mul_ln1347_fu_93_p2;
                p_read16_reg_391 <= p_read1;
                p_read27_reg_386 <= p_read2;
                p_read38_reg_381 <= p_read3;
                p_read49_reg_376 <= p_read4;
                p_read_10_reg_396 <= p_read;
                r_V_1_reg_229 <= r_V_1_fu_94_p2;
                r_V_reg_225 <= r_V_fu_95_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_block_pp0_stage0_11001, ret_V_fu_258_p2, ap_return_0_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_0 <= ret_V_fu_258_p2(25 downto 10);
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_block_pp0_stage0_11001, ret_V_1_fu_274_p2, ap_return_1_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_1 <= ret_V_1_fu_274_p2(25 downto 10);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_block_pp0_stage0_11001, sext_ln818_fu_310_p1, ap_return_2_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_2 <= sext_ln818_fu_310_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_block_pp0_stage0_11001, ret_V_3_fu_314_p2, ap_return_3_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_3 <= ret_V_3_fu_314_p2(25 downto 10);
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_block_pp0_stage0_11001, ret_V_4_fu_330_p2, ap_return_4_preg)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            ap_return_4 <= ret_V_4_fu_330_p2(25 downto 10);
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    mul_ln1347_1_fu_96_p1 <= ap_const_lv26_3FF897E(16 - 1 downto 0);
    mul_ln1347_2_fu_92_p1 <= ap_const_lv26_42F0(16 - 1 downto 0);
    mul_ln1347_fu_93_p1 <= ap_const_lv26_7D78(16 - 1 downto 0);
    r_V_1_fu_94_p0 <= r_V_1_fu_94_p00(10 - 1 downto 0);
    r_V_1_fu_94_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read38_reg_381),26));
    r_V_1_fu_94_p1 <= ap_const_lv26_3FF8850(16 - 1 downto 0);
    r_V_fu_95_p0 <= r_V_fu_95_p00(6 - 1 downto 0);
    r_V_fu_95_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read27_reg_386),21));
    r_V_fu_95_p1 <= ap_const_lv21_7887(16 - 1 downto 0);
    ret_V_1_fu_274_p2 <= std_logic_vector(unsigned(mul_ln1347_1_reg_221) + unsigned(ap_const_lv26_21C7400));
    ret_V_2_fu_294_p2 <= std_logic_vector(unsigned(zext_ln1347_fu_290_p1) + unsigned(ap_const_lv22_21DC00));
    ret_V_3_fu_314_p2 <= std_logic_vector(unsigned(r_V_1_reg_229) + unsigned(ap_const_lv26_2908000));
    ret_V_4_fu_330_p2 <= std_logic_vector(unsigned(mul_ln1347_2_reg_233) + unsigned(ap_const_lv26_6BDC00));
    ret_V_fu_258_p2 <= std_logic_vector(unsigned(mul_ln1347_reg_217) + unsigned(ap_const_lv26_2231400));
        sext_ln818_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln818_2_fu_300_p4),16));

    trunc_ln818_2_fu_300_p4 <= ret_V_2_fu_294_p2(21 downto 10);
    zext_ln1347_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_225),22));
end behav;
