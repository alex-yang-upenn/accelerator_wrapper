-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer11_out_dout : IN STD_LOGIC_VECTOR (79 downto 0);
    layer11_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer11_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer11_out_empty_n : IN STD_LOGIC;
    layer11_out_read : OUT STD_LOGIC;
    output_r_din : OUT STD_LOGIC_VECTOR (79 downto 0);
    output_r_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    output_r_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    output_r_full_n : IN STD_LOGIC;
    output_r_write : OUT STD_LOGIC );
end;


architecture behav of alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer11_out_blk_n : STD_LOGIC;
    signal output_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln199_fu_288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_reg_901 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_3_fu_292_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_3_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_4_reg_913 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_312_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_322_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_1_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_397_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_reg_942 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_reg_972 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_V_1_reg_978 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_984 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_989 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_994 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_2_fu_783_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_2_reg_999 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inv_exp_sum_V_reg_1009 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln2_reg_1014 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln818_1_reg_1019 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_2_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1029 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1034 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_3_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_4_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln1270_4_fu_177_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1273_fu_813_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1270_fu_178_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_3_fu_179_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_2_fu_180_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1270_1_fu_181_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln1651_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_349_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_2_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_3_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_fu_404_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1348_1_fu_407_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_410_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_16_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_2_fu_450_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_453_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_18_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_3_fu_493_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_496_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_20_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_2_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_4_fu_536_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_539_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_22_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_3_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_5_fu_579_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_582_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_24_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_4_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_622_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_630_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_1_fu_653_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_661_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_12_fu_671_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_2_fu_684_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_692_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_13_fu_702_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_3_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_3_fu_715_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_723_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_14_fu_733_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_4_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_4_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_4_fu_746_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_754_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_15_fu_764_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln813_1_fu_777_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_1_fu_777_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_1_fu_777_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_2_fu_783_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_fu_789_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_793_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_5_fu_798_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1270_fu_178_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1270_3_fu_179_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1270_4_fu_177_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1270_2_fu_180_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1270_1_fu_181_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component alveo_hls4ml_mul_18s_18s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_exp_tablbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_invert_tcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_exp_tablbkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4);

    invert_table_U : component alveo_hls4ml_softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_softmax_config13_s_invert_tcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_18s_30_1_1_U159 : component alveo_hls4ml_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1270_4_fu_177_p0,
        din1 => r_V_4_reg_994,
        dout => mul_ln1270_4_fu_177_p2);

    mul_18s_18s_30_1_1_U160 : component alveo_hls4ml_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1270_fu_178_p0,
        din1 => r_V_reg_972,
        dout => mul_ln1270_fu_178_p2);

    mul_18s_18s_30_1_1_U161 : component alveo_hls4ml_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1270_3_fu_179_p0,
        din1 => r_V_3_reg_989,
        dout => mul_ln1270_3_fu_179_p2);

    mul_18s_18s_30_1_1_U162 : component alveo_hls4ml_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1270_2_fu_180_p0,
        din1 => r_V_2_reg_984,
        dout => mul_ln1270_2_fu_180_p2);

    mul_18s_18s_30_1_1_U163 : component alveo_hls4ml_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1270_1_fu_181_p0,
        din1 => r_V_1_reg_978,
        dout => mul_ln1270_1_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln813_2_reg_999 <= add_ln813_2_fu_783_p2;
                r_V_1_reg_978 <= exp_table_q3;
                r_V_2_reg_984 <= exp_table_q2;
                r_V_3_reg_989 <= exp_table_q1;
                r_V_4_reg_994 <= exp_table_q0;
                r_V_reg_972 <= exp_table_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1651_1_reg_937 <= icmp_ln1651_1_fu_338_p2;
                icmp_ln1651_reg_932 <= icmp_ln1651_fu_332_p2;
                tmp_reg_920 <= layer11_out_dout(31 downto 16);
                tmp_s_reg_926 <= layer11_out_dout(47 downto 32);
                trunc_ln199_3_reg_907 <= layer11_out_dout(63 downto 48);
                trunc_ln199_4_reg_913 <= layer11_out_dout(79 downto 64);
                trunc_ln199_reg_901 <= trunc_ln199_fu_288_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                inv_exp_sum_V_reg_1009 <= invert_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_1029 <= mul_ln1270_2_fu_180_p2(29 downto 14);
                tmp_2_reg_1034 <= mul_ln1270_1_fu_181_p2(29 downto 14);
                trunc_ln2_reg_1014 <= mul_ln1270_fu_178_p2(29 downto 14);
                trunc_ln818_1_reg_1019 <= mul_ln1270_3_fu_179_p2(29 downto 14);
                trunc_ln818_2_reg_1024 <= mul_ln1270_4_fu_177_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_max_V_reg_942 <= x_max_V_fu_397_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, layer11_out_empty_n, output_r_full_n, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((output_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln813_1_fu_777_p0 <= exp_table_q1;
    add_ln813_1_fu_777_p1 <= exp_table_q0;
    add_ln813_1_fu_777_p2 <= std_logic_vector(signed(add_ln813_1_fu_777_p0) + signed(add_ln813_1_fu_777_p1));
    add_ln813_2_fu_783_p1 <= exp_table_q2;
    add_ln813_2_fu_783_p2 <= std_logic_vector(unsigned(add_ln813_1_fu_777_p2) + unsigned(add_ln813_2_fu_783_p1));
    add_ln813_fu_789_p2 <= std_logic_vector(signed(r_V_1_reg_978) + signed(r_V_reg_972));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, layer11_out_empty_n)
    begin
        if (((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(output_r_full_n)
    begin
        if ((output_r_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, layer11_out_empty_n)
    begin
                ap_block_state1 <= ((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, output_r_full_n, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((output_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_r_full_n, ap_CS_fsm_state8)
    begin
        if (((output_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_sum_V_fu_793_p2 <= std_logic_vector(unsigned(add_ln813_2_reg_999) + unsigned(add_ln813_fu_789_p2));
    exp_table_address0 <= zext_ln225_4_fu_772_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln225_3_fu_741_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln225_2_fu_710_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln225_1_fu_679_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln225_fu_648_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1651_1_fu_338_p2 <= "1" when (signed(tmp_s_fu_322_p4) < signed(trunc_ln199_3_fu_292_p4)) else "0";
    icmp_ln1651_2_fu_366_p2 <= "1" when (signed(select_ln65_fu_349_p3) < signed(select_ln65_1_fu_360_p3)) else "0";
    icmp_ln1651_3_fu_386_p2 <= "1" when (signed(select_ln65_2_fu_378_p3) < signed(trunc_ln199_4_reg_913)) else "0";
    icmp_ln1651_fu_332_p2 <= "1" when (signed(trunc_ln199_fu_288_p1) < signed(tmp_fu_312_p4)) else "0";
    invert_table_address0 <= zext_ln235_fu_808_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer11_out_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, layer11_out_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            layer11_out_blk_n <= layer11_out_empty_n;
        else 
            layer11_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer11_out_read_assign_proc : process(ap_start, ap_CS_fsm_state1, layer11_out_empty_n)
    begin
        if ((not(((layer11_out_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer11_out_read <= ap_const_logic_1;
        else 
            layer11_out_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1270_1_fu_181_p0 <= sext_ln1273_fu_813_p1(18 - 1 downto 0);
    mul_ln1270_2_fu_180_p0 <= sext_ln1273_fu_813_p1(18 - 1 downto 0);
    mul_ln1270_3_fu_179_p0 <= sext_ln1273_fu_813_p1(18 - 1 downto 0);
    mul_ln1270_4_fu_177_p0 <= sext_ln1273_fu_813_p1(18 - 1 downto 0);
    mul_ln1270_fu_178_p0 <= sext_ln1273_fu_813_p1(18 - 1 downto 0);

    output_r_blk_n_assign_proc : process(output_r_full_n, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_blk_n <= output_r_full_n;
        else 
            output_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_din <= ((((trunc_ln818_2_reg_1024 & trunc_ln818_1_reg_1019) & tmp_1_reg_1029) & tmp_2_reg_1034) & trunc_ln2_reg_1014);

    output_r_write_assign_proc : process(output_r_full_n, ap_CS_fsm_state8)
    begin
        if (((output_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_write <= ap_const_logic_1;
        else 
            output_r_write <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_481_p2 <= (xor_ln895_1_fu_475_p2 and p_Result_19_fu_467_p3);
    overflow_2_fu_524_p2 <= (xor_ln895_2_fu_518_p2 and p_Result_21_fu_510_p3);
    overflow_3_fu_567_p2 <= (xor_ln895_3_fu_561_p2 and p_Result_23_fu_553_p3);
    overflow_4_fu_610_p2 <= (xor_ln895_4_fu_604_p2 and p_Result_25_fu_596_p3);
    overflow_fu_438_p2 <= (xor_ln895_fu_432_p2 and p_Result_17_fu_424_p3);
    p_Result_12_fu_671_p3 <= 
        select_ln346_1_fu_653_p3 when (xor_ln302_1_fu_487_p2(0) = '1') else 
        tmp_4_fu_661_p4;
    p_Result_13_fu_702_p3 <= 
        select_ln346_2_fu_684_p3 when (xor_ln302_2_fu_530_p2(0) = '1') else 
        tmp_5_fu_692_p4;
    p_Result_14_fu_733_p3 <= 
        select_ln346_3_fu_715_p3 when (xor_ln302_3_fu_573_p2(0) = '1') else 
        tmp_6_fu_723_p4;
    p_Result_15_fu_764_p3 <= 
        select_ln346_4_fu_746_p3 when (xor_ln302_4_fu_616_p2(0) = '1') else 
        tmp_7_fu_754_p4;
    p_Result_16_fu_416_p3 <= ret_V_fu_410_p2(16 downto 16);
    p_Result_17_fu_424_p3 <= ret_V_fu_410_p2(15 downto 15);
    p_Result_18_fu_459_p3 <= ret_V_1_fu_453_p2(16 downto 16);
    p_Result_19_fu_467_p3 <= ret_V_1_fu_453_p2(15 downto 15);
    p_Result_20_fu_502_p3 <= ret_V_2_fu_496_p2(16 downto 16);
    p_Result_21_fu_510_p3 <= ret_V_2_fu_496_p2(15 downto 15);
    p_Result_22_fu_545_p3 <= ret_V_3_fu_539_p2(16 downto 16);
    p_Result_23_fu_553_p3 <= ret_V_3_fu_539_p2(15 downto 15);
    p_Result_24_fu_588_p3 <= ret_V_4_fu_582_p2(16 downto 16);
    p_Result_25_fu_596_p3 <= ret_V_4_fu_582_p2(15 downto 15);
    p_Result_5_fu_798_p4 <= exp_sum_V_fu_793_p2(17 downto 8);
    p_Result_s_fu_640_p3 <= 
        select_ln346_fu_622_p3 when (xor_ln302_fu_444_p2(0) = '1') else 
        tmp_3_fu_630_p4;
    ret_V_1_fu_453_p2 <= std_logic_vector(signed(sext_ln1348_2_fu_450_p1) - signed(sext_ln1348_1_fu_407_p1));
    ret_V_2_fu_496_p2 <= std_logic_vector(signed(sext_ln1348_3_fu_493_p1) - signed(sext_ln1348_1_fu_407_p1));
    ret_V_3_fu_539_p2 <= std_logic_vector(signed(sext_ln1348_4_fu_536_p1) - signed(sext_ln1348_1_fu_407_p1));
    ret_V_4_fu_582_p2 <= std_logic_vector(signed(sext_ln1348_5_fu_579_p1) - signed(sext_ln1348_1_fu_407_p1));
    ret_V_fu_410_p2 <= std_logic_vector(signed(sext_ln1348_fu_404_p1) - signed(sext_ln1348_1_fu_407_p1));
    select_ln346_1_fu_653_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_481_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_2_fu_684_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_524_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_3_fu_715_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_567_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_4_fu_746_p3 <= 
        ap_const_lv10_1FF when (overflow_4_fu_610_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_fu_622_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_438_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_360_p3 <= 
        tmp_s_reg_926 when (xor_ln1651_1_fu_355_p2(0) = '1') else 
        trunc_ln199_3_reg_907;
    select_ln65_2_fu_378_p3 <= 
        select_ln65_fu_349_p3 when (xor_ln1651_2_fu_372_p2(0) = '1') else 
        select_ln65_1_fu_360_p3;
    select_ln65_fu_349_p3 <= 
        trunc_ln199_reg_901 when (xor_ln1651_fu_344_p2(0) = '1') else 
        tmp_reg_920;
        sext_ln1273_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1009),30));

        sext_ln1348_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_942),17));

        sext_ln1348_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_920),17));

        sext_ln1348_3_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_926),17));

        sext_ln1348_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_3_reg_907),17));

        sext_ln1348_5_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_4_reg_913),17));

        sext_ln1348_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln199_reg_901),17));

    tmp_3_fu_630_p4 <= ret_V_fu_410_p2(15 downto 6);
    tmp_4_fu_661_p4 <= ret_V_1_fu_453_p2(15 downto 6);
    tmp_5_fu_692_p4 <= ret_V_2_fu_496_p2(15 downto 6);
    tmp_6_fu_723_p4 <= ret_V_3_fu_539_p2(15 downto 6);
    tmp_7_fu_754_p4 <= ret_V_4_fu_582_p2(15 downto 6);
    tmp_fu_312_p4 <= layer11_out_dout(31 downto 16);
    tmp_s_fu_322_p4 <= layer11_out_dout(47 downto 32);
    trunc_ln199_3_fu_292_p4 <= layer11_out_dout(63 downto 48);
    trunc_ln199_fu_288_p1 <= layer11_out_dout(16 - 1 downto 0);
    x_max_V_fu_397_p3 <= 
        select_ln65_2_fu_378_p3 when (xor_ln1651_3_fu_391_p2(0) = '1') else 
        trunc_ln199_4_reg_913;
    xor_ln1651_1_fu_355_p2 <= (icmp_ln1651_1_reg_937 xor ap_const_lv1_1);
    xor_ln1651_2_fu_372_p2 <= (icmp_ln1651_2_fu_366_p2 xor ap_const_lv1_1);
    xor_ln1651_3_fu_391_p2 <= (icmp_ln1651_3_fu_386_p2 xor ap_const_lv1_1);
    xor_ln1651_fu_344_p2 <= (icmp_ln1651_reg_932 xor ap_const_lv1_1);
    xor_ln302_1_fu_487_p2 <= (p_Result_19_fu_467_p3 xor p_Result_18_fu_459_p3);
    xor_ln302_2_fu_530_p2 <= (p_Result_21_fu_510_p3 xor p_Result_20_fu_502_p3);
    xor_ln302_3_fu_573_p2 <= (p_Result_23_fu_553_p3 xor p_Result_22_fu_545_p3);
    xor_ln302_4_fu_616_p2 <= (p_Result_25_fu_596_p3 xor p_Result_24_fu_588_p3);
    xor_ln302_fu_444_p2 <= (p_Result_17_fu_424_p3 xor p_Result_16_fu_416_p3);
    xor_ln895_1_fu_475_p2 <= (p_Result_18_fu_459_p3 xor ap_const_lv1_1);
    xor_ln895_2_fu_518_p2 <= (p_Result_20_fu_502_p3 xor ap_const_lv1_1);
    xor_ln895_3_fu_561_p2 <= (p_Result_22_fu_545_p3 xor ap_const_lv1_1);
    xor_ln895_4_fu_604_p2 <= (p_Result_24_fu_588_p3 xor ap_const_lv1_1);
    xor_ln895_fu_432_p2 <= (p_Result_16_fu_416_p3 xor ap_const_lv1_1);
    zext_ln225_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_12_fu_671_p3),64));
    zext_ln225_2_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_702_p3),64));
    zext_ln225_3_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_fu_733_p3),64));
    zext_ln225_4_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_764_p3),64));
    zext_ln225_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_640_p3),64));
    zext_ln235_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_798_p4),64));
end behav;
