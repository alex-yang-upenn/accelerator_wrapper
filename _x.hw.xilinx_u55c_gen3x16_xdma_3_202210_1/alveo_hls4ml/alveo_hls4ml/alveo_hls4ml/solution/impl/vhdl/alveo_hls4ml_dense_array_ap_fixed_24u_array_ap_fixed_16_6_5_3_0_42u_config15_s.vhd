-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_42u_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer13_out_dout : IN STD_LOGIC_VECTOR (383 downto 0);
    layer13_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer13_out_empty_n : IN STD_LOGIC;
    layer13_out_read : OUT STD_LOGIC;
    layer15_out_din : OUT STD_LOGIC_VECTOR (671 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_full_n : IN STD_LOGIC;
    layer15_out_write : OUT STD_LOGIC );
end;


architecture behav of alveo_hls4ml_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_42u_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer13_out_blk_n : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln1273_fu_145_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1273_reg_1155 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_166_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_167_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_168_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_169_reg_1175 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_170_reg_1180 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_47_reg_1185 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_172_reg_1190 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_49_reg_1195 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_50_reg_1200 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_51_reg_1205 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_176_reg_1210 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_177_reg_1215 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_178_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_179_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_180_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_181_reg_1235 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_182_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_183_reg_1245 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_reg_1250 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_185_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_186_reg_1260 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_187_reg_1265 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_64_reg_1270 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_106_fu_960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_106_reg_1275 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln813_111_fu_990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_111_reg_1280 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_123_fu_1051_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_123_reg_1285 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_171_fu_199_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_45_fu_209_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_151_fu_217_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_173_fu_243_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_47_fu_253_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_153_fu_261_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_174_fu_277_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_48_fu_287_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_154_fu_295_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_175_fu_311_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_49_fu_321_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_155_fu_329_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_188_fu_465_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_62_fu_475_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_168_fu_483_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln_fu_499_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_506_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_s_fu_522_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_146_fu_529_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_41_fu_545_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_147_fu_552_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_42_fu_568_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_148_fu_575_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_43_fu_591_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_149_fu_598_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_44_fu_614_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_150_fu_621_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_46_fu_637_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_152_fu_644_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_50_fu_660_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_156_fu_667_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_51_fu_683_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_157_fu_690_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_52_fu_706_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_158_fu_713_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_53_fu_729_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_159_fu_736_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_54_fu_752_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_160_fu_759_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_55_fu_775_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_161_fu_782_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_56_fu_798_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_162_fu_805_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_57_fu_821_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_163_fu_828_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_58_fu_844_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_164_fu_851_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_59_fu_867_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_165_fu_874_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_60_fu_890_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_166_fu_897_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_61_fu_913_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_167_fu_920_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mult_V_63_fu_926_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_61_fu_880_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_fu_936_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_62_fu_903_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_60_fu_857_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_59_fu_834_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_104_fu_948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_58_fu_811_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_105_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_103_fu_942_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_54_fu_719_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_53_fu_696_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_107_fu_966_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_52_fu_673_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_57_fu_788_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_56_fu_765_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_109_fu_978_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_55_fu_742_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_110_fu_984_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_108_fu_972_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_42_fu_535_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_43_fu_558_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_113_fu_996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_fu_512_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_44_fu_581_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_46_fu_627_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_115_fu_1008_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_45_fu_604_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_116_fu_1014_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_114_fu_1002_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_118_fu_1026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_48_fu_650_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_120_fu_1036_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_121_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_119_fu_1030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_122_fu_1045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_117_fu_1020_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln813_112_fu_1057_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_fu_1061_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln813_106_reg_1275 <= add_ln813_106_fu_960_p2;
                add_ln813_111_reg_1280 <= add_ln813_111_fu_990_p2;
                add_ln813_123_reg_1285 <= add_ln813_123_fu_1051_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mult_V_47_reg_1185 <= r_V_151_fu_217_p2(20 downto 5);
                mult_V_49_reg_1195 <= r_V_153_fu_261_p2(20 downto 5);
                mult_V_50_reg_1200 <= r_V_154_fu_295_p2(20 downto 5);
                mult_V_51_reg_1205 <= r_V_155_fu_329_p2(20 downto 5);
                mult_V_64_reg_1270 <= r_V_168_fu_483_p2(20 downto 5);
                tmp_166_reg_1160 <= layer13_out_dout(31 downto 16);
                tmp_167_reg_1165 <= layer13_out_dout(47 downto 32);
                tmp_168_reg_1170 <= layer13_out_dout(63 downto 48);
                tmp_169_reg_1175 <= layer13_out_dout(79 downto 64);
                tmp_170_reg_1180 <= layer13_out_dout(95 downto 80);
                tmp_172_reg_1190 <= layer13_out_dout(127 downto 112);
                tmp_176_reg_1210 <= layer13_out_dout(191 downto 176);
                tmp_177_reg_1215 <= layer13_out_dout(207 downto 192);
                tmp_178_reg_1220 <= layer13_out_dout(223 downto 208);
                tmp_179_reg_1225 <= layer13_out_dout(239 downto 224);
                tmp_180_reg_1230 <= layer13_out_dout(255 downto 240);
                tmp_181_reg_1235 <= layer13_out_dout(271 downto 256);
                tmp_182_reg_1240 <= layer13_out_dout(287 downto 272);
                tmp_183_reg_1245 <= layer13_out_dout(303 downto 288);
                tmp_184_reg_1250 <= layer13_out_dout(319 downto 304);
                tmp_185_reg_1255 <= layer13_out_dout(335 downto 320);
                tmp_186_reg_1260 <= layer13_out_dout(351 downto 336);
                tmp_187_reg_1265 <= layer13_out_dout(367 downto 352);
                trunc_ln1273_reg_1155 <= trunc_ln1273_fu_145_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer13_out_empty_n, layer15_out_full_n, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln813_103_fu_942_p2 <= std_logic_vector(unsigned(add_ln813_fu_936_p2) + unsigned(mult_V_62_fu_903_p4));
    add_ln813_104_fu_948_p2 <= std_logic_vector(unsigned(mult_V_60_fu_857_p4) + unsigned(mult_V_59_fu_834_p4));
    add_ln813_105_fu_954_p2 <= std_logic_vector(unsigned(add_ln813_104_fu_948_p2) + unsigned(mult_V_58_fu_811_p4));
    add_ln813_106_fu_960_p2 <= std_logic_vector(unsigned(add_ln813_105_fu_954_p2) + unsigned(add_ln813_103_fu_942_p2));
    add_ln813_107_fu_966_p2 <= std_logic_vector(unsigned(mult_V_54_fu_719_p4) + unsigned(mult_V_53_fu_696_p4));
    add_ln813_108_fu_972_p2 <= std_logic_vector(unsigned(add_ln813_107_fu_966_p2) + unsigned(mult_V_52_fu_673_p4));
    add_ln813_109_fu_978_p2 <= std_logic_vector(unsigned(mult_V_57_fu_788_p4) + unsigned(mult_V_56_fu_765_p4));
    add_ln813_110_fu_984_p2 <= std_logic_vector(unsigned(add_ln813_109_fu_978_p2) + unsigned(mult_V_55_fu_742_p4));
    add_ln813_111_fu_990_p2 <= std_logic_vector(unsigned(add_ln813_110_fu_984_p2) + unsigned(add_ln813_108_fu_972_p2));
    add_ln813_112_fu_1057_p2 <= std_logic_vector(unsigned(add_ln813_111_reg_1280) + unsigned(add_ln813_106_reg_1275));
    add_ln813_113_fu_996_p2 <= std_logic_vector(unsigned(mult_V_42_fu_535_p4) + unsigned(mult_V_43_fu_558_p4));
    add_ln813_114_fu_1002_p2 <= std_logic_vector(unsigned(add_ln813_113_fu_996_p2) + unsigned(mult_V_fu_512_p4));
    add_ln813_115_fu_1008_p2 <= std_logic_vector(unsigned(mult_V_44_fu_581_p4) + unsigned(mult_V_46_fu_627_p4));
    add_ln813_116_fu_1014_p2 <= std_logic_vector(unsigned(add_ln813_115_fu_1008_p2) + unsigned(mult_V_45_fu_604_p4));
    add_ln813_117_fu_1020_p2 <= std_logic_vector(unsigned(add_ln813_116_fu_1014_p2) + unsigned(add_ln813_114_fu_1002_p2));
    add_ln813_118_fu_1026_p2 <= std_logic_vector(unsigned(mult_V_47_reg_1185) + unsigned(mult_V_49_reg_1195));
    add_ln813_119_fu_1030_p2 <= std_logic_vector(unsigned(add_ln813_118_fu_1026_p2) + unsigned(mult_V_48_fu_650_p4));
    add_ln813_120_fu_1036_p2 <= std_logic_vector(unsigned(mult_V_50_reg_1200) + unsigned(mult_V_64_reg_1270));
    add_ln813_121_fu_1040_p2 <= std_logic_vector(unsigned(add_ln813_120_fu_1036_p2) + unsigned(mult_V_51_reg_1205));
    add_ln813_122_fu_1045_p2 <= std_logic_vector(unsigned(add_ln813_121_fu_1040_p2) + unsigned(add_ln813_119_fu_1030_p2));
    add_ln813_123_fu_1051_p2 <= std_logic_vector(unsigned(add_ln813_122_fu_1045_p2) + unsigned(add_ln813_117_fu_1020_p2));
    add_ln813_fu_936_p2 <= std_logic_vector(unsigned(mult_V_63_fu_926_p4) + unsigned(mult_V_61_fu_880_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(layer15_out_full_n)
    begin
        if ((layer15_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer13_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer15_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer13_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_blk_n <= layer13_out_empty_n;
        else 
            layer13_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer13_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer13_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer13_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer13_out_read <= ap_const_logic_1;
        else 
            layer13_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer15_out_blk_n <= layer15_out_full_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer15_out_din <= (((((((((((((((((((((((((((((((((((((((((res_V_fu_1061_p2 & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2) & res_V_fu_1061_p2);

    layer15_out_write_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            layer15_out_write <= ap_const_logic_1;
        else 
            layer15_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mult_V_42_fu_535_p4 <= r_V_146_fu_529_p2(20 downto 5);
    mult_V_43_fu_558_p4 <= r_V_147_fu_552_p2(20 downto 5);
    mult_V_44_fu_581_p4 <= r_V_148_fu_575_p2(20 downto 5);
    mult_V_45_fu_604_p4 <= r_V_149_fu_598_p2(20 downto 5);
    mult_V_46_fu_627_p4 <= r_V_150_fu_621_p2(20 downto 5);
    mult_V_48_fu_650_p4 <= r_V_152_fu_644_p2(20 downto 5);
    mult_V_52_fu_673_p4 <= r_V_156_fu_667_p2(20 downto 5);
    mult_V_53_fu_696_p4 <= r_V_157_fu_690_p2(20 downto 5);
    mult_V_54_fu_719_p4 <= r_V_158_fu_713_p2(20 downto 5);
    mult_V_55_fu_742_p4 <= r_V_159_fu_736_p2(20 downto 5);
    mult_V_56_fu_765_p4 <= r_V_160_fu_759_p2(20 downto 5);
    mult_V_57_fu_788_p4 <= r_V_161_fu_782_p2(20 downto 5);
    mult_V_58_fu_811_p4 <= r_V_162_fu_805_p2(20 downto 5);
    mult_V_59_fu_834_p4 <= r_V_163_fu_828_p2(20 downto 5);
    mult_V_60_fu_857_p4 <= r_V_164_fu_851_p2(20 downto 5);
    mult_V_61_fu_880_p4 <= r_V_165_fu_874_p2(20 downto 5);
    mult_V_62_fu_903_p4 <= r_V_166_fu_897_p2(20 downto 5);
    mult_V_63_fu_926_p4 <= r_V_167_fu_920_p2(20 downto 5);
    mult_V_fu_512_p4 <= r_V_fu_506_p2(20 downto 5);
    r_V_146_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_s_fu_522_p3));
    r_V_147_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_41_fu_545_p3));
    r_V_148_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_42_fu_568_p3));
    r_V_149_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_43_fu_591_p3));
    r_V_150_fu_621_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_44_fu_614_p3));
    r_V_151_fu_217_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_45_fu_209_p3));
    r_V_152_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_46_fu_637_p3));
    r_V_153_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_47_fu_253_p3));
    r_V_154_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_48_fu_287_p3));
    r_V_155_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_49_fu_321_p3));
    r_V_156_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_50_fu_660_p3));
    r_V_157_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_51_fu_683_p3));
    r_V_158_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_52_fu_706_p3));
    r_V_159_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_53_fu_729_p3));
    r_V_160_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_54_fu_752_p3));
    r_V_161_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_55_fu_775_p3));
    r_V_162_fu_805_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_56_fu_798_p3));
    r_V_163_fu_828_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_57_fu_821_p3));
    r_V_164_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_58_fu_844_p3));
    r_V_165_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_59_fu_867_p3));
    r_V_166_fu_897_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_60_fu_890_p3));
    r_V_167_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_61_fu_913_p3));
    r_V_168_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln1273_62_fu_475_p3));
    r_V_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(shl_ln_fu_499_p3));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    res_V_fu_1061_p2 <= std_logic_vector(unsigned(add_ln813_123_reg_1285) + unsigned(add_ln813_112_fu_1057_p2));
    shl_ln1273_41_fu_545_p3 <= (tmp_167_reg_1165 & ap_const_lv5_0);
    shl_ln1273_42_fu_568_p3 <= (tmp_168_reg_1170 & ap_const_lv5_0);
    shl_ln1273_43_fu_591_p3 <= (tmp_169_reg_1175 & ap_const_lv5_0);
    shl_ln1273_44_fu_614_p3 <= (tmp_170_reg_1180 & ap_const_lv5_0);
    shl_ln1273_45_fu_209_p3 <= (tmp_171_fu_199_p4 & ap_const_lv5_0);
    shl_ln1273_46_fu_637_p3 <= (tmp_172_reg_1190 & ap_const_lv5_0);
    shl_ln1273_47_fu_253_p3 <= (tmp_173_fu_243_p4 & ap_const_lv5_0);
    shl_ln1273_48_fu_287_p3 <= (tmp_174_fu_277_p4 & ap_const_lv5_0);
    shl_ln1273_49_fu_321_p3 <= (tmp_175_fu_311_p4 & ap_const_lv5_0);
    shl_ln1273_50_fu_660_p3 <= (tmp_176_reg_1210 & ap_const_lv5_0);
    shl_ln1273_51_fu_683_p3 <= (tmp_177_reg_1215 & ap_const_lv5_0);
    shl_ln1273_52_fu_706_p3 <= (tmp_178_reg_1220 & ap_const_lv5_0);
    shl_ln1273_53_fu_729_p3 <= (tmp_179_reg_1225 & ap_const_lv5_0);
    shl_ln1273_54_fu_752_p3 <= (tmp_180_reg_1230 & ap_const_lv5_0);
    shl_ln1273_55_fu_775_p3 <= (tmp_181_reg_1235 & ap_const_lv5_0);
    shl_ln1273_56_fu_798_p3 <= (tmp_182_reg_1240 & ap_const_lv5_0);
    shl_ln1273_57_fu_821_p3 <= (tmp_183_reg_1245 & ap_const_lv5_0);
    shl_ln1273_58_fu_844_p3 <= (tmp_184_reg_1250 & ap_const_lv5_0);
    shl_ln1273_59_fu_867_p3 <= (tmp_185_reg_1255 & ap_const_lv5_0);
    shl_ln1273_60_fu_890_p3 <= (tmp_186_reg_1260 & ap_const_lv5_0);
    shl_ln1273_61_fu_913_p3 <= (tmp_187_reg_1265 & ap_const_lv5_0);
    shl_ln1273_62_fu_475_p3 <= (tmp_188_fu_465_p4 & ap_const_lv5_0);
    shl_ln1273_s_fu_522_p3 <= (tmp_166_reg_1160 & ap_const_lv5_0);
    shl_ln_fu_499_p3 <= (trunc_ln1273_reg_1155 & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_171_fu_199_p4 <= layer13_out_dout(111 downto 96);
    tmp_173_fu_243_p4 <= layer13_out_dout(143 downto 128);
    tmp_174_fu_277_p4 <= layer13_out_dout(159 downto 144);
    tmp_175_fu_311_p4 <= layer13_out_dout(175 downto 160);
    tmp_188_fu_465_p4 <= layer13_out_dout(383 downto 368);
    trunc_ln1273_fu_145_p1 <= layer13_out_dout(16 - 1 downto 0);
end behav;
