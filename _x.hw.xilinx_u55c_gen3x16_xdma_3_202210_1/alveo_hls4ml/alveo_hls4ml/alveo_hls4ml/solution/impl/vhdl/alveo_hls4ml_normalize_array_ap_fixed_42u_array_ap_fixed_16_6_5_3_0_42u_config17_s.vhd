-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (671 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer17_out_din : OUT STD_LOGIC_VECTOR (671 downto 0);
    layer17_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_full_n : IN STD_LOGIC;
    layer17_out_write : OUT STD_LOGIC );
end;


architecture behav of alveo_hls4ml_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv26_100000 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal layer17_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln1273_fu_217_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1273_reg_1686 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_117_reg_1691 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_reg_1696 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_119_reg_1701 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_120_reg_1706 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_reg_1711 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_122_reg_1716 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_123_reg_1721 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_124_reg_1726 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_125_reg_1731 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_126_reg_1736 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_127_reg_1741 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_reg_1746 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_129_reg_1751 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_130_reg_1756 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_131_reg_1761 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_132_reg_1766 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_133_reg_1771 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_134_reg_1776 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_135_reg_1781 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_136_reg_1786 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_reg_1791 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_138_reg_1796 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_139_reg_1801 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_reg_1806 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_141_reg_1811 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_142_reg_1816 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_143_reg_1821 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_144_reg_1826 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_145_reg_1831 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_146_reg_1836 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_147_reg_1841 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_148_reg_1846 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_149_reg_1851 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_150_reg_1856 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_151_reg_1861 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_152_reg_1866 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_153_reg_1871 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_154_reg_1876 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_155_reg_1881 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_156_reg_1886 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_157_reg_1891 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal r_V_fu_631_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_fu_638_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_64_fu_654_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_64_fu_661_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_65_fu_677_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_65_fu_684_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_66_fu_700_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_66_fu_707_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_67_fu_723_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_67_fu_730_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_68_fu_746_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_68_fu_753_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_69_fu_769_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_69_fu_776_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_70_fu_792_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_70_fu_799_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_71_fu_815_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_71_fu_822_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_72_fu_838_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_72_fu_845_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_73_fu_861_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_73_fu_868_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_74_fu_884_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_74_fu_891_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_75_fu_907_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_75_fu_914_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_76_fu_930_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_76_fu_937_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_77_fu_953_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_77_fu_960_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_78_fu_976_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_78_fu_983_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_79_fu_999_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_79_fu_1006_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_80_fu_1022_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_80_fu_1029_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_81_fu_1045_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_81_fu_1052_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_82_fu_1068_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_82_fu_1075_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_83_fu_1091_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_83_fu_1098_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_84_fu_1114_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_84_fu_1121_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_85_fu_1137_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_85_fu_1144_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_86_fu_1160_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_86_fu_1167_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_87_fu_1183_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_87_fu_1190_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_88_fu_1206_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_88_fu_1213_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_89_fu_1229_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_89_fu_1236_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_90_fu_1252_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_90_fu_1259_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_91_fu_1275_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_91_fu_1282_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_92_fu_1298_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_92_fu_1305_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_93_fu_1321_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_93_fu_1328_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_94_fu_1344_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_94_fu_1351_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_95_fu_1367_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_95_fu_1374_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_96_fu_1390_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_96_fu_1397_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_97_fu_1413_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_97_fu_1420_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_98_fu_1436_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_98_fu_1443_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_99_fu_1459_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_99_fu_1466_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_100_fu_1482_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_100_fu_1489_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_101_fu_1505_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_101_fu_1512_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_102_fu_1528_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_102_fu_1535_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_103_fu_1551_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_103_fu_1558_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_104_fu_1574_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1347_104_fu_1581_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln818_102_fu_1587_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_101_fu_1564_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_100_fu_1541_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_99_fu_1518_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_98_fu_1495_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_97_fu_1472_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_96_fu_1449_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_95_fu_1426_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_94_fu_1403_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_93_fu_1380_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_92_fu_1357_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_91_fu_1334_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_90_fu_1311_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_89_fu_1288_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_88_fu_1265_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_87_fu_1242_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_86_fu_1219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_85_fu_1196_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_84_fu_1173_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_83_fu_1150_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_82_fu_1127_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_81_fu_1104_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_80_fu_1081_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_79_fu_1058_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_78_fu_1035_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_77_fu_1012_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_76_fu_989_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_75_fu_966_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_74_fu_943_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_73_fu_920_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_72_fu_897_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_71_fu_874_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_70_fu_851_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_69_fu_828_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_68_fu_805_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_67_fu_782_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_66_fu_759_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_65_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_64_fu_713_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_63_fu_690_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_s_fu_667_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_644_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_117_reg_1691 <= layer15_out_dout(31 downto 16);
                tmp_118_reg_1696 <= layer15_out_dout(47 downto 32);
                tmp_119_reg_1701 <= layer15_out_dout(63 downto 48);
                tmp_120_reg_1706 <= layer15_out_dout(79 downto 64);
                tmp_121_reg_1711 <= layer15_out_dout(95 downto 80);
                tmp_122_reg_1716 <= layer15_out_dout(111 downto 96);
                tmp_123_reg_1721 <= layer15_out_dout(127 downto 112);
                tmp_124_reg_1726 <= layer15_out_dout(143 downto 128);
                tmp_125_reg_1731 <= layer15_out_dout(159 downto 144);
                tmp_126_reg_1736 <= layer15_out_dout(175 downto 160);
                tmp_127_reg_1741 <= layer15_out_dout(191 downto 176);
                tmp_128_reg_1746 <= layer15_out_dout(207 downto 192);
                tmp_129_reg_1751 <= layer15_out_dout(223 downto 208);
                tmp_130_reg_1756 <= layer15_out_dout(239 downto 224);
                tmp_131_reg_1761 <= layer15_out_dout(255 downto 240);
                tmp_132_reg_1766 <= layer15_out_dout(271 downto 256);
                tmp_133_reg_1771 <= layer15_out_dout(287 downto 272);
                tmp_134_reg_1776 <= layer15_out_dout(303 downto 288);
                tmp_135_reg_1781 <= layer15_out_dout(319 downto 304);
                tmp_136_reg_1786 <= layer15_out_dout(335 downto 320);
                tmp_137_reg_1791 <= layer15_out_dout(351 downto 336);
                tmp_138_reg_1796 <= layer15_out_dout(367 downto 352);
                tmp_139_reg_1801 <= layer15_out_dout(383 downto 368);
                tmp_140_reg_1806 <= layer15_out_dout(399 downto 384);
                tmp_141_reg_1811 <= layer15_out_dout(415 downto 400);
                tmp_142_reg_1816 <= layer15_out_dout(431 downto 416);
                tmp_143_reg_1821 <= layer15_out_dout(447 downto 432);
                tmp_144_reg_1826 <= layer15_out_dout(463 downto 448);
                tmp_145_reg_1831 <= layer15_out_dout(479 downto 464);
                tmp_146_reg_1836 <= layer15_out_dout(495 downto 480);
                tmp_147_reg_1841 <= layer15_out_dout(511 downto 496);
                tmp_148_reg_1846 <= layer15_out_dout(527 downto 512);
                tmp_149_reg_1851 <= layer15_out_dout(543 downto 528);
                tmp_150_reg_1856 <= layer15_out_dout(559 downto 544);
                tmp_151_reg_1861 <= layer15_out_dout(575 downto 560);
                tmp_152_reg_1866 <= layer15_out_dout(591 downto 576);
                tmp_153_reg_1871 <= layer15_out_dout(607 downto 592);
                tmp_154_reg_1876 <= layer15_out_dout(623 downto 608);
                tmp_155_reg_1881 <= layer15_out_dout(639 downto 624);
                tmp_156_reg_1886 <= layer15_out_dout(655 downto 640);
                tmp_157_reg_1891 <= layer15_out_dout(671 downto 656);
                trunc_ln1273_reg_1686 <= trunc_ln1273_fu_217_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer15_out_empty_n, layer17_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1347_100_fu_1489_p2 <= std_logic_vector(unsigned(r_V_100_fu_1482_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_101_fu_1512_p2 <= std_logic_vector(unsigned(r_V_101_fu_1505_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_102_fu_1535_p2 <= std_logic_vector(unsigned(r_V_102_fu_1528_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_103_fu_1558_p2 <= std_logic_vector(unsigned(r_V_103_fu_1551_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_104_fu_1581_p2 <= std_logic_vector(unsigned(r_V_104_fu_1574_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_64_fu_661_p2 <= std_logic_vector(unsigned(r_V_64_fu_654_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_65_fu_684_p2 <= std_logic_vector(unsigned(r_V_65_fu_677_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_66_fu_707_p2 <= std_logic_vector(unsigned(r_V_66_fu_700_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_67_fu_730_p2 <= std_logic_vector(unsigned(r_V_67_fu_723_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_68_fu_753_p2 <= std_logic_vector(unsigned(r_V_68_fu_746_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_69_fu_776_p2 <= std_logic_vector(unsigned(r_V_69_fu_769_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_70_fu_799_p2 <= std_logic_vector(unsigned(r_V_70_fu_792_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_71_fu_822_p2 <= std_logic_vector(unsigned(r_V_71_fu_815_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_72_fu_845_p2 <= std_logic_vector(unsigned(r_V_72_fu_838_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_73_fu_868_p2 <= std_logic_vector(unsigned(r_V_73_fu_861_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_74_fu_891_p2 <= std_logic_vector(unsigned(r_V_74_fu_884_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_75_fu_914_p2 <= std_logic_vector(unsigned(r_V_75_fu_907_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_76_fu_937_p2 <= std_logic_vector(unsigned(r_V_76_fu_930_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_77_fu_960_p2 <= std_logic_vector(unsigned(r_V_77_fu_953_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_78_fu_983_p2 <= std_logic_vector(unsigned(r_V_78_fu_976_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_79_fu_1006_p2 <= std_logic_vector(unsigned(r_V_79_fu_999_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_80_fu_1029_p2 <= std_logic_vector(unsigned(r_V_80_fu_1022_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_81_fu_1052_p2 <= std_logic_vector(unsigned(r_V_81_fu_1045_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_82_fu_1075_p2 <= std_logic_vector(unsigned(r_V_82_fu_1068_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_83_fu_1098_p2 <= std_logic_vector(unsigned(r_V_83_fu_1091_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_84_fu_1121_p2 <= std_logic_vector(unsigned(r_V_84_fu_1114_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_85_fu_1144_p2 <= std_logic_vector(unsigned(r_V_85_fu_1137_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_86_fu_1167_p2 <= std_logic_vector(unsigned(r_V_86_fu_1160_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_87_fu_1190_p2 <= std_logic_vector(unsigned(r_V_87_fu_1183_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_88_fu_1213_p2 <= std_logic_vector(unsigned(r_V_88_fu_1206_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_89_fu_1236_p2 <= std_logic_vector(unsigned(r_V_89_fu_1229_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_90_fu_1259_p2 <= std_logic_vector(unsigned(r_V_90_fu_1252_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_91_fu_1282_p2 <= std_logic_vector(unsigned(r_V_91_fu_1275_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_92_fu_1305_p2 <= std_logic_vector(unsigned(r_V_92_fu_1298_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_93_fu_1328_p2 <= std_logic_vector(unsigned(r_V_93_fu_1321_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_94_fu_1351_p2 <= std_logic_vector(unsigned(r_V_94_fu_1344_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_95_fu_1374_p2 <= std_logic_vector(unsigned(r_V_95_fu_1367_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_96_fu_1397_p2 <= std_logic_vector(unsigned(r_V_96_fu_1390_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_97_fu_1420_p2 <= std_logic_vector(unsigned(r_V_97_fu_1413_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_98_fu_1443_p2 <= std_logic_vector(unsigned(r_V_98_fu_1436_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_99_fu_1466_p2 <= std_logic_vector(unsigned(r_V_99_fu_1459_p3) + unsigned(ap_const_lv26_100000));
    add_ln1347_fu_638_p2 <= std_logic_vector(unsigned(r_V_fu_631_p3) + unsigned(ap_const_lv26_100000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer17_out_full_n)
    begin
        if ((layer17_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer17_out_blk_n_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer17_out_blk_n <= layer17_out_full_n;
        else 
            layer17_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer17_out_din <= (((((((((((((((((((((((((((((((((((((((((trunc_ln818_102_fu_1587_p4 & trunc_ln818_101_fu_1564_p4) & trunc_ln818_100_fu_1541_p4) & trunc_ln818_99_fu_1518_p4) & trunc_ln818_98_fu_1495_p4) & trunc_ln818_97_fu_1472_p4) & trunc_ln818_96_fu_1449_p4) & trunc_ln818_95_fu_1426_p4) & trunc_ln818_94_fu_1403_p4) & trunc_ln818_93_fu_1380_p4) & trunc_ln818_92_fu_1357_p4) & trunc_ln818_91_fu_1334_p4) & trunc_ln818_90_fu_1311_p4) & trunc_ln818_89_fu_1288_p4) & trunc_ln818_88_fu_1265_p4) & trunc_ln818_87_fu_1242_p4) & trunc_ln818_86_fu_1219_p4) & trunc_ln818_85_fu_1196_p4) & trunc_ln818_84_fu_1173_p4) & trunc_ln818_83_fu_1150_p4) & trunc_ln818_82_fu_1127_p4) & trunc_ln818_81_fu_1104_p4) & trunc_ln818_80_fu_1081_p4) & trunc_ln818_79_fu_1058_p4) & trunc_ln818_78_fu_1035_p4) & trunc_ln818_77_fu_1012_p4) & trunc_ln818_76_fu_989_p4) & trunc_ln818_75_fu_966_p4) & trunc_ln818_74_fu_943_p4) & trunc_ln818_73_fu_920_p4) & trunc_ln818_72_fu_897_p4) & trunc_ln818_71_fu_874_p4) & trunc_ln818_70_fu_851_p4) & trunc_ln818_69_fu_828_p4) & trunc_ln818_68_fu_805_p4) & trunc_ln818_67_fu_782_p4) & trunc_ln818_66_fu_759_p4) & trunc_ln818_65_fu_736_p4) & trunc_ln818_64_fu_713_p4) & trunc_ln818_63_fu_690_p4) & trunc_ln818_s_fu_667_p4) & trunc_ln_fu_644_p4);

    layer17_out_write_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer17_out_write <= ap_const_logic_1;
        else 
            layer17_out_write <= ap_const_logic_0;
        end if; 
    end process;

    r_V_100_fu_1482_p3 <= (tmp_153_reg_1871 & ap_const_lv10_0);
    r_V_101_fu_1505_p3 <= (tmp_154_reg_1876 & ap_const_lv10_0);
    r_V_102_fu_1528_p3 <= (tmp_155_reg_1881 & ap_const_lv10_0);
    r_V_103_fu_1551_p3 <= (tmp_156_reg_1886 & ap_const_lv10_0);
    r_V_104_fu_1574_p3 <= (tmp_157_reg_1891 & ap_const_lv10_0);
    r_V_64_fu_654_p3 <= (tmp_117_reg_1691 & ap_const_lv10_0);
    r_V_65_fu_677_p3 <= (tmp_118_reg_1696 & ap_const_lv10_0);
    r_V_66_fu_700_p3 <= (tmp_119_reg_1701 & ap_const_lv10_0);
    r_V_67_fu_723_p3 <= (tmp_120_reg_1706 & ap_const_lv10_0);
    r_V_68_fu_746_p3 <= (tmp_121_reg_1711 & ap_const_lv10_0);
    r_V_69_fu_769_p3 <= (tmp_122_reg_1716 & ap_const_lv10_0);
    r_V_70_fu_792_p3 <= (tmp_123_reg_1721 & ap_const_lv10_0);
    r_V_71_fu_815_p3 <= (tmp_124_reg_1726 & ap_const_lv10_0);
    r_V_72_fu_838_p3 <= (tmp_125_reg_1731 & ap_const_lv10_0);
    r_V_73_fu_861_p3 <= (tmp_126_reg_1736 & ap_const_lv10_0);
    r_V_74_fu_884_p3 <= (tmp_127_reg_1741 & ap_const_lv10_0);
    r_V_75_fu_907_p3 <= (tmp_128_reg_1746 & ap_const_lv10_0);
    r_V_76_fu_930_p3 <= (tmp_129_reg_1751 & ap_const_lv10_0);
    r_V_77_fu_953_p3 <= (tmp_130_reg_1756 & ap_const_lv10_0);
    r_V_78_fu_976_p3 <= (tmp_131_reg_1761 & ap_const_lv10_0);
    r_V_79_fu_999_p3 <= (tmp_132_reg_1766 & ap_const_lv10_0);
    r_V_80_fu_1022_p3 <= (tmp_133_reg_1771 & ap_const_lv10_0);
    r_V_81_fu_1045_p3 <= (tmp_134_reg_1776 & ap_const_lv10_0);
    r_V_82_fu_1068_p3 <= (tmp_135_reg_1781 & ap_const_lv10_0);
    r_V_83_fu_1091_p3 <= (tmp_136_reg_1786 & ap_const_lv10_0);
    r_V_84_fu_1114_p3 <= (tmp_137_reg_1791 & ap_const_lv10_0);
    r_V_85_fu_1137_p3 <= (tmp_138_reg_1796 & ap_const_lv10_0);
    r_V_86_fu_1160_p3 <= (tmp_139_reg_1801 & ap_const_lv10_0);
    r_V_87_fu_1183_p3 <= (tmp_140_reg_1806 & ap_const_lv10_0);
    r_V_88_fu_1206_p3 <= (tmp_141_reg_1811 & ap_const_lv10_0);
    r_V_89_fu_1229_p3 <= (tmp_142_reg_1816 & ap_const_lv10_0);
    r_V_90_fu_1252_p3 <= (tmp_143_reg_1821 & ap_const_lv10_0);
    r_V_91_fu_1275_p3 <= (tmp_144_reg_1826 & ap_const_lv10_0);
    r_V_92_fu_1298_p3 <= (tmp_145_reg_1831 & ap_const_lv10_0);
    r_V_93_fu_1321_p3 <= (tmp_146_reg_1836 & ap_const_lv10_0);
    r_V_94_fu_1344_p3 <= (tmp_147_reg_1841 & ap_const_lv10_0);
    r_V_95_fu_1367_p3 <= (tmp_148_reg_1846 & ap_const_lv10_0);
    r_V_96_fu_1390_p3 <= (tmp_149_reg_1851 & ap_const_lv10_0);
    r_V_97_fu_1413_p3 <= (tmp_150_reg_1856 & ap_const_lv10_0);
    r_V_98_fu_1436_p3 <= (tmp_151_reg_1861 & ap_const_lv10_0);
    r_V_99_fu_1459_p3 <= (tmp_152_reg_1866 & ap_const_lv10_0);
    r_V_fu_631_p3 <= (trunc_ln1273_reg_1686 & ap_const_lv10_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1273_fu_217_p1 <= layer15_out_dout(16 - 1 downto 0);
    trunc_ln818_100_fu_1541_p4 <= add_ln1347_102_fu_1535_p2(25 downto 10);
    trunc_ln818_101_fu_1564_p4 <= add_ln1347_103_fu_1558_p2(25 downto 10);
    trunc_ln818_102_fu_1587_p4 <= add_ln1347_104_fu_1581_p2(25 downto 10);
    trunc_ln818_63_fu_690_p4 <= add_ln1347_65_fu_684_p2(25 downto 10);
    trunc_ln818_64_fu_713_p4 <= add_ln1347_66_fu_707_p2(25 downto 10);
    trunc_ln818_65_fu_736_p4 <= add_ln1347_67_fu_730_p2(25 downto 10);
    trunc_ln818_66_fu_759_p4 <= add_ln1347_68_fu_753_p2(25 downto 10);
    trunc_ln818_67_fu_782_p4 <= add_ln1347_69_fu_776_p2(25 downto 10);
    trunc_ln818_68_fu_805_p4 <= add_ln1347_70_fu_799_p2(25 downto 10);
    trunc_ln818_69_fu_828_p4 <= add_ln1347_71_fu_822_p2(25 downto 10);
    trunc_ln818_70_fu_851_p4 <= add_ln1347_72_fu_845_p2(25 downto 10);
    trunc_ln818_71_fu_874_p4 <= add_ln1347_73_fu_868_p2(25 downto 10);
    trunc_ln818_72_fu_897_p4 <= add_ln1347_74_fu_891_p2(25 downto 10);
    trunc_ln818_73_fu_920_p4 <= add_ln1347_75_fu_914_p2(25 downto 10);
    trunc_ln818_74_fu_943_p4 <= add_ln1347_76_fu_937_p2(25 downto 10);
    trunc_ln818_75_fu_966_p4 <= add_ln1347_77_fu_960_p2(25 downto 10);
    trunc_ln818_76_fu_989_p4 <= add_ln1347_78_fu_983_p2(25 downto 10);
    trunc_ln818_77_fu_1012_p4 <= add_ln1347_79_fu_1006_p2(25 downto 10);
    trunc_ln818_78_fu_1035_p4 <= add_ln1347_80_fu_1029_p2(25 downto 10);
    trunc_ln818_79_fu_1058_p4 <= add_ln1347_81_fu_1052_p2(25 downto 10);
    trunc_ln818_80_fu_1081_p4 <= add_ln1347_82_fu_1075_p2(25 downto 10);
    trunc_ln818_81_fu_1104_p4 <= add_ln1347_83_fu_1098_p2(25 downto 10);
    trunc_ln818_82_fu_1127_p4 <= add_ln1347_84_fu_1121_p2(25 downto 10);
    trunc_ln818_83_fu_1150_p4 <= add_ln1347_85_fu_1144_p2(25 downto 10);
    trunc_ln818_84_fu_1173_p4 <= add_ln1347_86_fu_1167_p2(25 downto 10);
    trunc_ln818_85_fu_1196_p4 <= add_ln1347_87_fu_1190_p2(25 downto 10);
    trunc_ln818_86_fu_1219_p4 <= add_ln1347_88_fu_1213_p2(25 downto 10);
    trunc_ln818_87_fu_1242_p4 <= add_ln1347_89_fu_1236_p2(25 downto 10);
    trunc_ln818_88_fu_1265_p4 <= add_ln1347_90_fu_1259_p2(25 downto 10);
    trunc_ln818_89_fu_1288_p4 <= add_ln1347_91_fu_1282_p2(25 downto 10);
    trunc_ln818_90_fu_1311_p4 <= add_ln1347_92_fu_1305_p2(25 downto 10);
    trunc_ln818_91_fu_1334_p4 <= add_ln1347_93_fu_1328_p2(25 downto 10);
    trunc_ln818_92_fu_1357_p4 <= add_ln1347_94_fu_1351_p2(25 downto 10);
    trunc_ln818_93_fu_1380_p4 <= add_ln1347_95_fu_1374_p2(25 downto 10);
    trunc_ln818_94_fu_1403_p4 <= add_ln1347_96_fu_1397_p2(25 downto 10);
    trunc_ln818_95_fu_1426_p4 <= add_ln1347_97_fu_1420_p2(25 downto 10);
    trunc_ln818_96_fu_1449_p4 <= add_ln1347_98_fu_1443_p2(25 downto 10);
    trunc_ln818_97_fu_1472_p4 <= add_ln1347_99_fu_1466_p2(25 downto 10);
    trunc_ln818_98_fu_1495_p4 <= add_ln1347_100_fu_1489_p2(25 downto 10);
    trunc_ln818_99_fu_1518_p4 <= add_ln1347_101_fu_1512_p2(25 downto 10);
    trunc_ln818_s_fu_667_p4 <= add_ln1347_64_fu_661_p2(25 downto 10);
    trunc_ln_fu_644_p4 <= add_ln1347_fu_638_p2(25 downto 10);
end behav;
