// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_pooling1d_cl_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] p_read;
input  [5:0] p_read1;
input  [5:0] p_read2;
input  [5:0] p_read3;
input  [5:0] p_read4;
input  [5:0] p_read5;
input  [5:0] p_read6;
input  [5:0] p_read7;
input  [5:0] p_read8;
input  [5:0] p_read9;
input  [5:0] p_read10;
input  [5:0] p_read11;
input  [5:0] p_read12;
input  [5:0] p_read13;
input  [5:0] p_read14;
input  [5:0] p_read15;
input  [5:0] p_read16;
input  [5:0] p_read17;
input  [5:0] p_read18;
input  [5:0] p_read19;
input  [5:0] p_read20;
input  [5:0] p_read21;
input  [5:0] p_read22;
input  [5:0] p_read23;
output  [9:0] ap_return_0;
output  [9:0] ap_return_1;
output  [9:0] ap_return_2;
output  [9:0] ap_return_3;
output  [9:0] ap_return_4;
output  [9:0] ap_return_5;
output  [9:0] ap_return_6;
output  [9:0] ap_return_7;
output  [9:0] ap_return_8;
output  [9:0] ap_return_9;
output  [9:0] ap_return_10;
output  [9:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] ap_return_0;
reg[9:0] ap_return_1;
reg[9:0] ap_return_2;
reg[9:0] ap_return_3;
reg[9:0] ap_return_4;
reg[9:0] ap_return_5;
reg[9:0] ap_return_6;
reg[9:0] ap_return_7;
reg[9:0] ap_return_8;
reg[9:0] ap_return_9;
reg[9:0] ap_return_10;
reg[9:0] ap_return_11;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln1649_fu_208_p2;
wire   [5:0] select_ln14_fu_214_p3;
wire   [0:0] icmp_ln1649_188_fu_230_p2;
wire   [5:0] select_ln14_47_fu_236_p3;
wire   [0:0] icmp_ln1649_189_fu_252_p2;
wire   [5:0] select_ln14_48_fu_258_p3;
wire   [0:0] icmp_ln1649_190_fu_274_p2;
wire   [5:0] select_ln14_49_fu_280_p3;
wire   [0:0] icmp_ln1649_191_fu_296_p2;
wire   [5:0] select_ln14_50_fu_302_p3;
wire   [0:0] icmp_ln1649_192_fu_318_p2;
wire   [5:0] select_ln14_51_fu_324_p3;
wire   [0:0] icmp_ln1649_193_fu_340_p2;
wire   [5:0] select_ln14_52_fu_346_p3;
wire   [0:0] icmp_ln1649_194_fu_362_p2;
wire   [5:0] select_ln14_53_fu_368_p3;
wire   [0:0] icmp_ln1649_195_fu_384_p2;
wire   [5:0] select_ln14_54_fu_390_p3;
wire   [0:0] icmp_ln1649_196_fu_406_p2;
wire   [5:0] select_ln14_55_fu_412_p3;
wire   [0:0] icmp_ln1649_197_fu_428_p2;
wire   [5:0] select_ln14_56_fu_434_p3;
wire   [0:0] icmp_ln1649_198_fu_450_p2;
wire   [5:0] select_ln14_57_fu_456_p3;
wire   [9:0] shl_ln_fu_222_p3;
wire   [9:0] shl_ln838_s_fu_244_p3;
wire   [9:0] shl_ln838_45_fu_266_p3;
wire   [9:0] shl_ln838_46_fu_288_p3;
wire   [9:0] shl_ln838_47_fu_310_p3;
wire   [9:0] shl_ln838_48_fu_332_p3;
wire   [9:0] shl_ln838_49_fu_354_p3;
wire   [9:0] shl_ln838_50_fu_376_p3;
wire   [9:0] shl_ln838_51_fu_398_p3;
wire   [9:0] shl_ln838_52_fu_420_p3;
wire   [9:0] shl_ln838_53_fu_442_p3;
wire   [9:0] shl_ln838_54_fu_464_p3;
reg   [9:0] ap_return_0_preg;
reg   [9:0] ap_return_1_preg;
reg   [9:0] ap_return_2_preg;
reg   [9:0] ap_return_3_preg;
reg   [9:0] ap_return_4_preg;
reg   [9:0] ap_return_5_preg;
reg   [9:0] ap_return_6_preg;
reg   [9:0] ap_return_7_preg;
reg   [9:0] ap_return_8_preg;
reg   [9:0] ap_return_9_preg;
reg   [9:0] ap_return_10_preg;
reg   [9:0] ap_return_11_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 10'd0;
#0 ap_return_1_preg = 10'd0;
#0 ap_return_2_preg = 10'd0;
#0 ap_return_3_preg = 10'd0;
#0 ap_return_4_preg = 10'd0;
#0 ap_return_5_preg = 10'd0;
#0 ap_return_6_preg = 10'd0;
#0 ap_return_7_preg = 10'd0;
#0 ap_return_8_preg = 10'd0;
#0 ap_return_9_preg = 10'd0;
#0 ap_return_10_preg = 10'd0;
#0 ap_return_11_preg = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[9 : 4] <= shl_ln_fu_222_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_10_preg[4] <= 1'b0;
        ap_return_10_preg[5] <= 1'b0;
        ap_return_10_preg[6] <= 1'b0;
        ap_return_10_preg[7] <= 1'b0;
        ap_return_10_preg[8] <= 1'b0;
        ap_return_10_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_10_preg[9 : 4] <= shl_ln838_53_fu_442_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_11_preg[4] <= 1'b0;
        ap_return_11_preg[5] <= 1'b0;
        ap_return_11_preg[6] <= 1'b0;
        ap_return_11_preg[7] <= 1'b0;
        ap_return_11_preg[8] <= 1'b0;
        ap_return_11_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_11_preg[9 : 4] <= shl_ln838_54_fu_464_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[9 : 4] <= shl_ln838_s_fu_244_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[9 : 4] <= shl_ln838_45_fu_266_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[9 : 4] <= shl_ln838_46_fu_288_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_4_preg[4] <= 1'b0;
        ap_return_4_preg[5] <= 1'b0;
        ap_return_4_preg[6] <= 1'b0;
        ap_return_4_preg[7] <= 1'b0;
        ap_return_4_preg[8] <= 1'b0;
        ap_return_4_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_4_preg[9 : 4] <= shl_ln838_47_fu_310_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_5_preg[4] <= 1'b0;
        ap_return_5_preg[5] <= 1'b0;
        ap_return_5_preg[6] <= 1'b0;
        ap_return_5_preg[7] <= 1'b0;
        ap_return_5_preg[8] <= 1'b0;
        ap_return_5_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_5_preg[9 : 4] <= shl_ln838_48_fu_332_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_6_preg[4] <= 1'b0;
        ap_return_6_preg[5] <= 1'b0;
        ap_return_6_preg[6] <= 1'b0;
        ap_return_6_preg[7] <= 1'b0;
        ap_return_6_preg[8] <= 1'b0;
        ap_return_6_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_6_preg[9 : 4] <= shl_ln838_49_fu_354_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_7_preg[4] <= 1'b0;
        ap_return_7_preg[5] <= 1'b0;
        ap_return_7_preg[6] <= 1'b0;
        ap_return_7_preg[7] <= 1'b0;
        ap_return_7_preg[8] <= 1'b0;
        ap_return_7_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_7_preg[9 : 4] <= shl_ln838_50_fu_376_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_8_preg[4] <= 1'b0;
        ap_return_8_preg[5] <= 1'b0;
        ap_return_8_preg[6] <= 1'b0;
        ap_return_8_preg[7] <= 1'b0;
        ap_return_8_preg[8] <= 1'b0;
        ap_return_8_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_8_preg[9 : 4] <= shl_ln838_51_fu_398_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_9_preg[4] <= 1'b0;
        ap_return_9_preg[5] <= 1'b0;
        ap_return_9_preg[6] <= 1'b0;
        ap_return_9_preg[7] <= 1'b0;
        ap_return_9_preg[8] <= 1'b0;
        ap_return_9_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_9_preg[9 : 4] <= shl_ln838_52_fu_420_p3[9 : 4];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = shl_ln_fu_222_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = shl_ln838_s_fu_244_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_10 = shl_ln838_53_fu_442_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_11 = shl_ln838_54_fu_464_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = shl_ln838_45_fu_266_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = shl_ln838_46_fu_288_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = shl_ln838_47_fu_310_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = shl_ln838_48_fu_332_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = shl_ln838_49_fu_354_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = shl_ln838_50_fu_376_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = shl_ln838_51_fu_398_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = shl_ln838_52_fu_420_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln1649_188_fu_230_p2 = ((p_read13 > p_read1) ? 1'b1 : 1'b0);

assign icmp_ln1649_189_fu_252_p2 = ((p_read14 > p_read2) ? 1'b1 : 1'b0);

assign icmp_ln1649_190_fu_274_p2 = ((p_read15 > p_read3) ? 1'b1 : 1'b0);

assign icmp_ln1649_191_fu_296_p2 = ((p_read16 > p_read4) ? 1'b1 : 1'b0);

assign icmp_ln1649_192_fu_318_p2 = ((p_read17 > p_read5) ? 1'b1 : 1'b0);

assign icmp_ln1649_193_fu_340_p2 = ((p_read18 > p_read6) ? 1'b1 : 1'b0);

assign icmp_ln1649_194_fu_362_p2 = ((p_read19 > p_read7) ? 1'b1 : 1'b0);

assign icmp_ln1649_195_fu_384_p2 = ((p_read20 > p_read8) ? 1'b1 : 1'b0);

assign icmp_ln1649_196_fu_406_p2 = ((p_read21 > p_read9) ? 1'b1 : 1'b0);

assign icmp_ln1649_197_fu_428_p2 = ((p_read22 > p_read10) ? 1'b1 : 1'b0);

assign icmp_ln1649_198_fu_450_p2 = ((p_read23 > p_read11) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_208_p2 = ((p_read12 > p_read) ? 1'b1 : 1'b0);

assign select_ln14_47_fu_236_p3 = ((icmp_ln1649_188_fu_230_p2[0:0] == 1'b1) ? p_read13 : p_read1);

assign select_ln14_48_fu_258_p3 = ((icmp_ln1649_189_fu_252_p2[0:0] == 1'b1) ? p_read14 : p_read2);

assign select_ln14_49_fu_280_p3 = ((icmp_ln1649_190_fu_274_p2[0:0] == 1'b1) ? p_read15 : p_read3);

assign select_ln14_50_fu_302_p3 = ((icmp_ln1649_191_fu_296_p2[0:0] == 1'b1) ? p_read16 : p_read4);

assign select_ln14_51_fu_324_p3 = ((icmp_ln1649_192_fu_318_p2[0:0] == 1'b1) ? p_read17 : p_read5);

assign select_ln14_52_fu_346_p3 = ((icmp_ln1649_193_fu_340_p2[0:0] == 1'b1) ? p_read18 : p_read6);

assign select_ln14_53_fu_368_p3 = ((icmp_ln1649_194_fu_362_p2[0:0] == 1'b1) ? p_read19 : p_read7);

assign select_ln14_54_fu_390_p3 = ((icmp_ln1649_195_fu_384_p2[0:0] == 1'b1) ? p_read20 : p_read8);

assign select_ln14_55_fu_412_p3 = ((icmp_ln1649_196_fu_406_p2[0:0] == 1'b1) ? p_read21 : p_read9);

assign select_ln14_56_fu_434_p3 = ((icmp_ln1649_197_fu_428_p2[0:0] == 1'b1) ? p_read22 : p_read10);

assign select_ln14_57_fu_456_p3 = ((icmp_ln1649_198_fu_450_p2[0:0] == 1'b1) ? p_read23 : p_read11);

assign select_ln14_fu_214_p3 = ((icmp_ln1649_fu_208_p2[0:0] == 1'b1) ? p_read12 : p_read);

assign shl_ln838_45_fu_266_p3 = {{select_ln14_48_fu_258_p3}, {4'd0}};

assign shl_ln838_46_fu_288_p3 = {{select_ln14_49_fu_280_p3}, {4'd0}};

assign shl_ln838_47_fu_310_p3 = {{select_ln14_50_fu_302_p3}, {4'd0}};

assign shl_ln838_48_fu_332_p3 = {{select_ln14_51_fu_324_p3}, {4'd0}};

assign shl_ln838_49_fu_354_p3 = {{select_ln14_52_fu_346_p3}, {4'd0}};

assign shl_ln838_50_fu_376_p3 = {{select_ln14_53_fu_368_p3}, {4'd0}};

assign shl_ln838_51_fu_398_p3 = {{select_ln14_54_fu_390_p3}, {4'd0}};

assign shl_ln838_52_fu_420_p3 = {{select_ln14_55_fu_412_p3}, {4'd0}};

assign shl_ln838_53_fu_442_p3 = {{select_ln14_56_fu_434_p3}, {4'd0}};

assign shl_ln838_54_fu_464_p3 = {{select_ln14_57_fu_456_p3}, {4'd0}};

assign shl_ln838_s_fu_244_p3 = {{select_ln14_47_fu_236_p3}, {4'd0}};

assign shl_ln_fu_222_p3 = {{select_ln14_fu_214_p3}, {4'd0}};

always @ (posedge ap_clk) begin
    ap_return_0_preg[3:0] <= 4'b0000;
    ap_return_1_preg[3:0] <= 4'b0000;
    ap_return_2_preg[3:0] <= 4'b0000;
    ap_return_3_preg[3:0] <= 4'b0000;
    ap_return_4_preg[3:0] <= 4'b0000;
    ap_return_5_preg[3:0] <= 4'b0000;
    ap_return_6_preg[3:0] <= 4'b0000;
    ap_return_7_preg[3:0] <= 4'b0000;
    ap_return_8_preg[3:0] <= 4'b0000;
    ap_return_9_preg[3:0] <= 4'b0000;
    ap_return_10_preg[3:0] <= 4'b0000;
    ap_return_11_preg[3:0] <= 4'b0000;
end

endmodule //alveo_hls4ml_pooling1d_cl_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config13_s
