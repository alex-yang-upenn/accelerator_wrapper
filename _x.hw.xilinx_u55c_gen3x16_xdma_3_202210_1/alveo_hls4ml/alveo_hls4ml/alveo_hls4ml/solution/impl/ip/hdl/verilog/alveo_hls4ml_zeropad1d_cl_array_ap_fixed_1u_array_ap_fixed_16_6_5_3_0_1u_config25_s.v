// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_zeropad1d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_1u_config25_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_r_dout,
        input_r_num_data_valid,
        input_r_fifo_cap,
        input_r_empty_n,
        input_r_read,
        layer25_out_din,
        layer25_out_num_data_valid,
        layer25_out_fifo_cap,
        layer25_out_full_n,
        layer25_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] input_r_dout;
input  [3:0] input_r_num_data_valid;
input  [3:0] input_r_fifo_cap;
input   input_r_empty_n;
output   input_r_read;
output  [15:0] layer25_out_din;
input  [4:0] layer25_out_num_data_valid;
input  [4:0] layer25_out_fifo_cap;
input   layer25_out_full_n;
output   layer25_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg input_r_read;
reg[15:0] layer25_out_din;
reg layer25_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_r_blk_n;
wire    ap_CS_fsm_state4;
reg    layer25_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln32_fu_77_p2;
reg   [2:0] i_fu_46;
wire   [2:0] i_4_fu_83_p2;
reg    ap_block_state2;
reg    ap_block_state1;
reg   [3:0] i_1_fu_50;
wire   [3:0] i_6_fu_108_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln37_fu_102_p2;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln37_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_50 <= 4'd0;
    end else if (((icmp_ln37_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_fu_50 <= i_6_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_46 <= 3'd0;
    end else if ((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_46 <= i_4_fu_83_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_blk_n = input_r_empty_n;
    end else begin
        input_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_r_read = 1'b1;
    end else begin
        input_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln32_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        layer25_out_blk_n = layer25_out_full_n;
    end else begin
        layer25_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        layer25_out_din = input_r_dout;
    end else if ((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        layer25_out_din = 16'd0;
    end else begin
        layer25_out_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        layer25_out_write = 1'b1;
    end else begin
        layer25_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0)) & (icmp_ln32_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln37_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln32_fu_77_p2 == 1'd0) & (layer25_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((layer25_out_full_n == 1'b0) | (input_r_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign i_4_fu_83_p2 = (i_fu_46 + 3'd1);

assign i_6_fu_108_p2 = (i_1_fu_50 + 4'd1);

assign icmp_ln32_fu_77_p2 = ((i_fu_46 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_102_p2 = ((i_1_fu_50 == 4'd8) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //alveo_hls4ml_zeropad1d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_1u_config25_s
