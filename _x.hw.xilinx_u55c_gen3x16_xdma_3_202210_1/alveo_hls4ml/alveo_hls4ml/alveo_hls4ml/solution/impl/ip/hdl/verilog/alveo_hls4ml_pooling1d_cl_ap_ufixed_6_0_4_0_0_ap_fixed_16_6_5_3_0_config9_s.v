// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_pooling1d_cl_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] p_read;
input  [5:0] p_read1;
input  [5:0] p_read2;
input  [5:0] p_read3;
input  [5:0] p_read4;
input  [5:0] p_read5;
input  [5:0] p_read6;
input  [5:0] p_read7;
input  [5:0] p_read8;
input  [5:0] p_read9;
input  [5:0] p_read10;
input  [5:0] p_read11;
input  [5:0] p_read12;
input  [5:0] p_read13;
input  [5:0] p_read14;
input  [5:0] p_read15;
input  [5:0] p_read16;
input  [5:0] p_read17;
input  [5:0] p_read18;
input  [5:0] p_read19;
input  [5:0] p_read20;
input  [5:0] p_read21;
input  [5:0] p_read22;
input  [5:0] p_read23;
input  [5:0] p_read24;
input  [5:0] p_read25;
input  [5:0] p_read26;
input  [5:0] p_read27;
input  [5:0] p_read28;
input  [5:0] p_read29;
input  [5:0] p_read30;
input  [5:0] p_read31;
output  [9:0] ap_return_0;
output  [9:0] ap_return_1;
output  [9:0] ap_return_2;
output  [9:0] ap_return_3;
output  [9:0] ap_return_4;
output  [9:0] ap_return_5;
output  [9:0] ap_return_6;
output  [9:0] ap_return_7;
output  [9:0] ap_return_8;
output  [9:0] ap_return_9;
output  [9:0] ap_return_10;
output  [9:0] ap_return_11;
output  [9:0] ap_return_12;
output  [9:0] ap_return_13;
output  [9:0] ap_return_14;
output  [9:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] ap_return_0;
reg[9:0] ap_return_1;
reg[9:0] ap_return_2;
reg[9:0] ap_return_3;
reg[9:0] ap_return_4;
reg[9:0] ap_return_5;
reg[9:0] ap_return_6;
reg[9:0] ap_return_7;
reg[9:0] ap_return_8;
reg[9:0] ap_return_9;
reg[9:0] ap_return_10;
reg[9:0] ap_return_11;
reg[9:0] ap_return_12;
reg[9:0] ap_return_13;
reg[9:0] ap_return_14;
reg[9:0] ap_return_15;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln1649_fu_272_p2;
wire   [5:0] select_ln14_fu_278_p3;
wire   [0:0] icmp_ln1649_142_fu_294_p2;
wire   [5:0] select_ln14_1_fu_300_p3;
wire   [0:0] icmp_ln1649_143_fu_316_p2;
wire   [5:0] select_ln14_2_fu_322_p3;
wire   [0:0] icmp_ln1649_144_fu_338_p2;
wire   [5:0] select_ln14_3_fu_344_p3;
wire   [0:0] icmp_ln1649_145_fu_360_p2;
wire   [5:0] select_ln14_4_fu_366_p3;
wire   [0:0] icmp_ln1649_146_fu_382_p2;
wire   [5:0] select_ln14_5_fu_388_p3;
wire   [0:0] icmp_ln1649_147_fu_404_p2;
wire   [5:0] select_ln14_6_fu_410_p3;
wire   [0:0] icmp_ln1649_148_fu_426_p2;
wire   [5:0] select_ln14_7_fu_432_p3;
wire   [0:0] icmp_ln1649_149_fu_448_p2;
wire   [5:0] select_ln14_8_fu_454_p3;
wire   [0:0] icmp_ln1649_150_fu_470_p2;
wire   [5:0] select_ln14_9_fu_476_p3;
wire   [0:0] icmp_ln1649_151_fu_492_p2;
wire   [5:0] select_ln14_10_fu_498_p3;
wire   [0:0] icmp_ln1649_152_fu_514_p2;
wire   [5:0] select_ln14_11_fu_520_p3;
wire   [0:0] icmp_ln1649_153_fu_536_p2;
wire   [5:0] select_ln14_12_fu_542_p3;
wire   [0:0] icmp_ln1649_154_fu_558_p2;
wire   [5:0] select_ln14_13_fu_564_p3;
wire   [0:0] icmp_ln1649_155_fu_580_p2;
wire   [5:0] select_ln14_14_fu_586_p3;
wire   [0:0] icmp_ln1649_156_fu_602_p2;
wire   [5:0] select_ln14_15_fu_608_p3;
wire   [9:0] shl_ln_fu_286_p3;
wire   [9:0] shl_ln838_2_fu_330_p3;
wire   [9:0] shl_ln838_4_fu_374_p3;
wire   [9:0] shl_ln838_6_fu_418_p3;
wire   [9:0] shl_ln838_8_fu_462_p3;
wire   [9:0] shl_ln838_s_fu_506_p3;
wire   [9:0] shl_ln838_11_fu_550_p3;
wire   [9:0] shl_ln838_13_fu_594_p3;
wire   [9:0] shl_ln838_1_fu_308_p3;
wire   [9:0] shl_ln838_3_fu_352_p3;
wire   [9:0] shl_ln838_5_fu_396_p3;
wire   [9:0] shl_ln838_7_fu_440_p3;
wire   [9:0] shl_ln838_9_fu_484_p3;
wire   [9:0] shl_ln838_10_fu_528_p3;
wire   [9:0] shl_ln838_12_fu_572_p3;
wire   [9:0] shl_ln838_14_fu_616_p3;
reg   [9:0] ap_return_0_preg;
reg   [9:0] ap_return_1_preg;
reg   [9:0] ap_return_2_preg;
reg   [9:0] ap_return_3_preg;
reg   [9:0] ap_return_4_preg;
reg   [9:0] ap_return_5_preg;
reg   [9:0] ap_return_6_preg;
reg   [9:0] ap_return_7_preg;
reg   [9:0] ap_return_8_preg;
reg   [9:0] ap_return_9_preg;
reg   [9:0] ap_return_10_preg;
reg   [9:0] ap_return_11_preg;
reg   [9:0] ap_return_12_preg;
reg   [9:0] ap_return_13_preg;
reg   [9:0] ap_return_14_preg;
reg   [9:0] ap_return_15_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 10'd0;
#0 ap_return_1_preg = 10'd0;
#0 ap_return_2_preg = 10'd0;
#0 ap_return_3_preg = 10'd0;
#0 ap_return_4_preg = 10'd0;
#0 ap_return_5_preg = 10'd0;
#0 ap_return_6_preg = 10'd0;
#0 ap_return_7_preg = 10'd0;
#0 ap_return_8_preg = 10'd0;
#0 ap_return_9_preg = 10'd0;
#0 ap_return_10_preg = 10'd0;
#0 ap_return_11_preg = 10'd0;
#0 ap_return_12_preg = 10'd0;
#0 ap_return_13_preg = 10'd0;
#0 ap_return_14_preg = 10'd0;
#0 ap_return_15_preg = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[9 : 4] <= shl_ln_fu_286_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_10_preg[4] <= 1'b0;
        ap_return_10_preg[5] <= 1'b0;
        ap_return_10_preg[6] <= 1'b0;
        ap_return_10_preg[7] <= 1'b0;
        ap_return_10_preg[8] <= 1'b0;
        ap_return_10_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_10_preg[9 : 4] <= shl_ln838_5_fu_396_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_11_preg[4] <= 1'b0;
        ap_return_11_preg[5] <= 1'b0;
        ap_return_11_preg[6] <= 1'b0;
        ap_return_11_preg[7] <= 1'b0;
        ap_return_11_preg[8] <= 1'b0;
        ap_return_11_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_11_preg[9 : 4] <= shl_ln838_7_fu_440_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_12_preg[4] <= 1'b0;
        ap_return_12_preg[5] <= 1'b0;
        ap_return_12_preg[6] <= 1'b0;
        ap_return_12_preg[7] <= 1'b0;
        ap_return_12_preg[8] <= 1'b0;
        ap_return_12_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_12_preg[9 : 4] <= shl_ln838_9_fu_484_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_13_preg[4] <= 1'b0;
        ap_return_13_preg[5] <= 1'b0;
        ap_return_13_preg[6] <= 1'b0;
        ap_return_13_preg[7] <= 1'b0;
        ap_return_13_preg[8] <= 1'b0;
        ap_return_13_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_13_preg[9 : 4] <= shl_ln838_10_fu_528_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_14_preg[4] <= 1'b0;
        ap_return_14_preg[5] <= 1'b0;
        ap_return_14_preg[6] <= 1'b0;
        ap_return_14_preg[7] <= 1'b0;
        ap_return_14_preg[8] <= 1'b0;
        ap_return_14_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_14_preg[9 : 4] <= shl_ln838_12_fu_572_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_15_preg[4] <= 1'b0;
        ap_return_15_preg[5] <= 1'b0;
        ap_return_15_preg[6] <= 1'b0;
        ap_return_15_preg[7] <= 1'b0;
        ap_return_15_preg[8] <= 1'b0;
        ap_return_15_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_15_preg[9 : 4] <= shl_ln838_14_fu_616_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[9 : 4] <= shl_ln838_2_fu_330_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[9 : 4] <= shl_ln838_4_fu_374_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[9 : 4] <= shl_ln838_6_fu_418_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_4_preg[4] <= 1'b0;
        ap_return_4_preg[5] <= 1'b0;
        ap_return_4_preg[6] <= 1'b0;
        ap_return_4_preg[7] <= 1'b0;
        ap_return_4_preg[8] <= 1'b0;
        ap_return_4_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_4_preg[9 : 4] <= shl_ln838_8_fu_462_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_5_preg[4] <= 1'b0;
        ap_return_5_preg[5] <= 1'b0;
        ap_return_5_preg[6] <= 1'b0;
        ap_return_5_preg[7] <= 1'b0;
        ap_return_5_preg[8] <= 1'b0;
        ap_return_5_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_5_preg[9 : 4] <= shl_ln838_s_fu_506_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_6_preg[4] <= 1'b0;
        ap_return_6_preg[5] <= 1'b0;
        ap_return_6_preg[6] <= 1'b0;
        ap_return_6_preg[7] <= 1'b0;
        ap_return_6_preg[8] <= 1'b0;
        ap_return_6_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_6_preg[9 : 4] <= shl_ln838_11_fu_550_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_7_preg[4] <= 1'b0;
        ap_return_7_preg[5] <= 1'b0;
        ap_return_7_preg[6] <= 1'b0;
        ap_return_7_preg[7] <= 1'b0;
        ap_return_7_preg[8] <= 1'b0;
        ap_return_7_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_7_preg[9 : 4] <= shl_ln838_13_fu_594_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_8_preg[4] <= 1'b0;
        ap_return_8_preg[5] <= 1'b0;
        ap_return_8_preg[6] <= 1'b0;
        ap_return_8_preg[7] <= 1'b0;
        ap_return_8_preg[8] <= 1'b0;
        ap_return_8_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_8_preg[9 : 4] <= shl_ln838_1_fu_308_p3[9 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_9_preg[4] <= 1'b0;
        ap_return_9_preg[5] <= 1'b0;
        ap_return_9_preg[6] <= 1'b0;
        ap_return_9_preg[7] <= 1'b0;
        ap_return_9_preg[8] <= 1'b0;
        ap_return_9_preg[9] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_9_preg[9 : 4] <= shl_ln838_3_fu_352_p3[9 : 4];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = shl_ln_fu_286_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = shl_ln838_2_fu_330_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_10 = shl_ln838_5_fu_396_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_11 = shl_ln838_7_fu_440_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_12 = shl_ln838_9_fu_484_p3;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_13 = shl_ln838_10_fu_528_p3;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_14 = shl_ln838_12_fu_572_p3;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_15 = shl_ln838_14_fu_616_p3;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = shl_ln838_4_fu_374_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = shl_ln838_6_fu_418_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = shl_ln838_8_fu_462_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = shl_ln838_s_fu_506_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = shl_ln838_11_fu_550_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = shl_ln838_13_fu_594_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = shl_ln838_1_fu_308_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = shl_ln838_3_fu_352_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln1649_142_fu_294_p2 = ((p_read24 > p_read16) ? 1'b1 : 1'b0);

assign icmp_ln1649_143_fu_316_p2 = ((p_read9 > p_read1) ? 1'b1 : 1'b0);

assign icmp_ln1649_144_fu_338_p2 = ((p_read25 > p_read17) ? 1'b1 : 1'b0);

assign icmp_ln1649_145_fu_360_p2 = ((p_read10 > p_read2) ? 1'b1 : 1'b0);

assign icmp_ln1649_146_fu_382_p2 = ((p_read26 > p_read18) ? 1'b1 : 1'b0);

assign icmp_ln1649_147_fu_404_p2 = ((p_read11 > p_read3) ? 1'b1 : 1'b0);

assign icmp_ln1649_148_fu_426_p2 = ((p_read27 > p_read19) ? 1'b1 : 1'b0);

assign icmp_ln1649_149_fu_448_p2 = ((p_read12 > p_read4) ? 1'b1 : 1'b0);

assign icmp_ln1649_150_fu_470_p2 = ((p_read28 > p_read20) ? 1'b1 : 1'b0);

assign icmp_ln1649_151_fu_492_p2 = ((p_read13 > p_read5) ? 1'b1 : 1'b0);

assign icmp_ln1649_152_fu_514_p2 = ((p_read29 > p_read21) ? 1'b1 : 1'b0);

assign icmp_ln1649_153_fu_536_p2 = ((p_read14 > p_read6) ? 1'b1 : 1'b0);

assign icmp_ln1649_154_fu_558_p2 = ((p_read30 > p_read22) ? 1'b1 : 1'b0);

assign icmp_ln1649_155_fu_580_p2 = ((p_read15 > p_read7) ? 1'b1 : 1'b0);

assign icmp_ln1649_156_fu_602_p2 = ((p_read31 > p_read23) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_272_p2 = ((p_read8 > p_read) ? 1'b1 : 1'b0);

assign select_ln14_10_fu_498_p3 = ((icmp_ln1649_151_fu_492_p2[0:0] == 1'b1) ? p_read13 : p_read5);

assign select_ln14_11_fu_520_p3 = ((icmp_ln1649_152_fu_514_p2[0:0] == 1'b1) ? p_read29 : p_read21);

assign select_ln14_12_fu_542_p3 = ((icmp_ln1649_153_fu_536_p2[0:0] == 1'b1) ? p_read14 : p_read6);

assign select_ln14_13_fu_564_p3 = ((icmp_ln1649_154_fu_558_p2[0:0] == 1'b1) ? p_read30 : p_read22);

assign select_ln14_14_fu_586_p3 = ((icmp_ln1649_155_fu_580_p2[0:0] == 1'b1) ? p_read15 : p_read7);

assign select_ln14_15_fu_608_p3 = ((icmp_ln1649_156_fu_602_p2[0:0] == 1'b1) ? p_read31 : p_read23);

assign select_ln14_1_fu_300_p3 = ((icmp_ln1649_142_fu_294_p2[0:0] == 1'b1) ? p_read24 : p_read16);

assign select_ln14_2_fu_322_p3 = ((icmp_ln1649_143_fu_316_p2[0:0] == 1'b1) ? p_read9 : p_read1);

assign select_ln14_3_fu_344_p3 = ((icmp_ln1649_144_fu_338_p2[0:0] == 1'b1) ? p_read25 : p_read17);

assign select_ln14_4_fu_366_p3 = ((icmp_ln1649_145_fu_360_p2[0:0] == 1'b1) ? p_read10 : p_read2);

assign select_ln14_5_fu_388_p3 = ((icmp_ln1649_146_fu_382_p2[0:0] == 1'b1) ? p_read26 : p_read18);

assign select_ln14_6_fu_410_p3 = ((icmp_ln1649_147_fu_404_p2[0:0] == 1'b1) ? p_read11 : p_read3);

assign select_ln14_7_fu_432_p3 = ((icmp_ln1649_148_fu_426_p2[0:0] == 1'b1) ? p_read27 : p_read19);

assign select_ln14_8_fu_454_p3 = ((icmp_ln1649_149_fu_448_p2[0:0] == 1'b1) ? p_read12 : p_read4);

assign select_ln14_9_fu_476_p3 = ((icmp_ln1649_150_fu_470_p2[0:0] == 1'b1) ? p_read28 : p_read20);

assign select_ln14_fu_278_p3 = ((icmp_ln1649_fu_272_p2[0:0] == 1'b1) ? p_read8 : p_read);

assign shl_ln838_10_fu_528_p3 = {{select_ln14_11_fu_520_p3}, {4'd0}};

assign shl_ln838_11_fu_550_p3 = {{select_ln14_12_fu_542_p3}, {4'd0}};

assign shl_ln838_12_fu_572_p3 = {{select_ln14_13_fu_564_p3}, {4'd0}};

assign shl_ln838_13_fu_594_p3 = {{select_ln14_14_fu_586_p3}, {4'd0}};

assign shl_ln838_14_fu_616_p3 = {{select_ln14_15_fu_608_p3}, {4'd0}};

assign shl_ln838_1_fu_308_p3 = {{select_ln14_1_fu_300_p3}, {4'd0}};

assign shl_ln838_2_fu_330_p3 = {{select_ln14_2_fu_322_p3}, {4'd0}};

assign shl_ln838_3_fu_352_p3 = {{select_ln14_3_fu_344_p3}, {4'd0}};

assign shl_ln838_4_fu_374_p3 = {{select_ln14_4_fu_366_p3}, {4'd0}};

assign shl_ln838_5_fu_396_p3 = {{select_ln14_5_fu_388_p3}, {4'd0}};

assign shl_ln838_6_fu_418_p3 = {{select_ln14_6_fu_410_p3}, {4'd0}};

assign shl_ln838_7_fu_440_p3 = {{select_ln14_7_fu_432_p3}, {4'd0}};

assign shl_ln838_8_fu_462_p3 = {{select_ln14_8_fu_454_p3}, {4'd0}};

assign shl_ln838_9_fu_484_p3 = {{select_ln14_9_fu_476_p3}, {4'd0}};

assign shl_ln838_s_fu_506_p3 = {{select_ln14_10_fu_498_p3}, {4'd0}};

assign shl_ln_fu_286_p3 = {{select_ln14_fu_278_p3}, {4'd0}};

always @ (posedge ap_clk) begin
    ap_return_0_preg[3:0] <= 4'b0000;
    ap_return_1_preg[3:0] <= 4'b0000;
    ap_return_2_preg[3:0] <= 4'b0000;
    ap_return_3_preg[3:0] <= 4'b0000;
    ap_return_4_preg[3:0] <= 4'b0000;
    ap_return_5_preg[3:0] <= 4'b0000;
    ap_return_6_preg[3:0] <= 4'b0000;
    ap_return_7_preg[3:0] <= 4'b0000;
    ap_return_8_preg[3:0] <= 4'b0000;
    ap_return_9_preg[3:0] <= 4'b0000;
    ap_return_10_preg[3:0] <= 4'b0000;
    ap_return_11_preg[3:0] <= 4'b0000;
    ap_return_12_preg[3:0] <= 4'b0000;
    ap_return_13_preg[3:0] <= 4'b0000;
    ap_return_14_preg[3:0] <= 4'b0000;
    ap_return_15_preg[3:0] <= 4'b0000;
end

endmodule //alveo_hls4ml_pooling1d_cl_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config9_s
