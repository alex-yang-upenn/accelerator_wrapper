-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    i_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    i_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (5 downto 0);
    out_buf_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_buf_ce0 : OUT STD_LOGIC;
    out_buf_we0 : OUT STD_LOGIC;
    out_buf_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of alveo_hls4ml_dense_latency_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_read_185_reg_512 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_185_reg_512_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read_188_reg_517 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read723_reg_522 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read420_reg_527 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read319_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_read16_reg_537 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln813_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_reg_542 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_3_fu_319_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_3_reg_547 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_7_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_7_reg_552 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_7_reg_552_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_9_fu_331_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_9_reg_557 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_10_fu_337_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_10_reg_562 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln813_6_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_6_reg_567 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_12_fu_464_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_12_reg_572 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_read_reg_577 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_14_fu_502_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln813_14_reg_582 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln66_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln818_1_fu_193_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_2_fu_201_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_5_fu_209_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_6_fu_217_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_8_fu_225_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_9_fu_233_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_s_fu_241_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_10_fu_249_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_12_fu_257_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_13_fu_265_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln813_1_fu_273_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_2_fu_277_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_5_fu_281_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_6_fu_285_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_8_fu_289_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_9_fu_293_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_10_fu_297_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_11_fu_301_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_13_fu_305_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_14_fu_309_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln813_cast_fu_371_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln818_3_fu_343_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_4_fu_350_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_7_fu_357_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln818_11_fu_364_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln813_16_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_1_fu_403_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_17_fu_409_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_3_fu_384_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_20_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_4_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_4_fu_422_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_21_fu_428_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_2_fu_413_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln813_5_fu_432_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_18_fu_438_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln813_7_fu_392_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln813_24_fu_451_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_12_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln813_11_fu_454_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln813_25_fu_460_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_23_fu_448_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln818_14_fu_470_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln813_22_fu_481_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln813_26_fu_489_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_8_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln813_13_fu_492_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln813_19_fu_498_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln813_15_fu_477_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln813_10_reg_562(10 downto 4) <= add_ln813_10_fu_337_p2(10 downto 4);
                    add_ln813_12_reg_572(12 downto 4) <= add_ln813_12_fu_464_p2(12 downto 4);
                    add_ln813_3_reg_547(10 downto 4) <= add_ln813_3_fu_319_p2(10 downto 4);
                    add_ln813_6_reg_567(13 downto 4) <= add_ln813_6_fu_442_p2(13 downto 4);
                    add_ln813_7_reg_552(10 downto 4) <= add_ln813_7_fu_325_p2(10 downto 4);
                    add_ln813_7_reg_552_pp0_iter1_reg(10 downto 4) <= add_ln813_7_reg_552(10 downto 4);
                    add_ln813_9_reg_557(10 downto 4) <= add_ln813_9_fu_331_p2(10 downto 4);
                    add_ln813_reg_542(10 downto 4) <= add_ln813_fu_313_p2(10 downto 4);
                p_read16_reg_537 <= p_read;
                p_read319_reg_532 <= p_read3;
                p_read420_reg_527 <= p_read4;
                p_read723_reg_522 <= p_read7;
                p_read_185_reg_512 <= p_read15;
                p_read_185_reg_512_pp0_iter1_reg <= p_read_185_reg_512;
                p_read_188_reg_517 <= p_read12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln813_14_reg_582(14 downto 4) <= add_ln813_14_fu_502_p2(14 downto 4);
                i_read_reg_577 <= i_dout;
            end if;
        end if;
    end process;
    add_ln813_reg_542(3 downto 0) <= "0000";
    add_ln813_3_reg_547(3 downto 0) <= "0000";
    add_ln813_7_reg_552(3 downto 0) <= "0000";
    add_ln813_7_reg_552_pp0_iter1_reg(3 downto 0) <= "0000";
    add_ln813_9_reg_557(3 downto 0) <= "0000";
    add_ln813_10_reg_562(3 downto 0) <= "0000";
    add_ln813_6_reg_567(3 downto 0) <= "0000";
    add_ln813_12_reg_572(3 downto 0) <= "0000";
    add_ln813_14_reg_582(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_10_fu_337_p2 <= std_logic_vector(unsigned(zext_ln813_13_fu_305_p1) + unsigned(zext_ln813_14_fu_309_p1));
    add_ln813_11_fu_454_p2 <= std_logic_vector(unsigned(zext_ln813_24_fu_451_p1) + unsigned(zext_ln813_12_fu_396_p1));
    add_ln813_12_fu_464_p2 <= std_logic_vector(unsigned(zext_ln813_25_fu_460_p1) + unsigned(zext_ln813_23_fu_448_p1));
    add_ln813_13_fu_492_p2 <= std_logic_vector(unsigned(zext_ln813_26_fu_489_p1) + unsigned(add_ln813_8_fu_484_p2));
    add_ln813_14_fu_502_p2 <= std_logic_vector(unsigned(zext_ln813_19_fu_498_p1) + unsigned(zext_ln813_15_fu_477_p1));
    add_ln813_1_fu_403_p2 <= std_logic_vector(unsigned(zext_ln813_16_fu_400_p1) + unsigned(zext_ln813_fu_380_p1));
    add_ln813_2_fu_413_p2 <= std_logic_vector(unsigned(zext_ln813_17_fu_409_p1) + unsigned(zext_ln813_3_fu_384_p1));
    add_ln813_3_fu_319_p2 <= std_logic_vector(unsigned(zext_ln813_5_fu_281_p1) + unsigned(zext_ln813_6_fu_285_p1));
    add_ln813_4_fu_422_p2 <= std_logic_vector(unsigned(zext_ln813_20_fu_419_p1) + unsigned(zext_ln813_4_fu_388_p1));
    add_ln813_5_fu_432_p2 <= std_logic_vector(unsigned(zext_ln813_21_fu_428_p1) + unsigned(add_ln813_2_fu_413_p2));
    add_ln813_6_fu_442_p2 <= std_logic_vector(unsigned(zext_ln813_18_fu_438_p1) + unsigned(zext_ln813_7_fu_392_p1));
    add_ln813_7_fu_325_p2 <= std_logic_vector(unsigned(zext_ln813_8_fu_289_p1) + unsigned(zext_ln813_9_fu_293_p1));
    add_ln813_8_fu_484_p2 <= std_logic_vector(unsigned(zext_ln813_22_fu_481_p1) + unsigned(add_ln813_6_reg_567));
    add_ln813_9_fu_331_p2 <= std_logic_vector(unsigned(zext_ln813_10_fu_297_p1) + unsigned(zext_ln813_11_fu_301_p1));
    add_ln813_fu_313_p2 <= std_logic_vector(unsigned(zext_ln813_1_fu_273_p1) + unsigned(zext_ln813_2_fu_277_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_done_reg, i_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((i_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_done_reg, i_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((i_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(i_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (i_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, i_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_address0 <= zext_ln66_fu_508_p1(13 - 1 downto 0);

    out_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_ce0 <= ap_const_logic_1;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_d0 <= add_ln813_14_reg_582;

    out_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln818_10_fu_249_p3 <= (p_read11 & ap_const_lv4_0);
    shl_ln818_11_fu_364_p3 <= (p_read_188_reg_517 & ap_const_lv4_0);
    shl_ln818_12_fu_257_p3 <= (p_read13 & ap_const_lv4_0);
    shl_ln818_13_fu_265_p3 <= (p_read14 & ap_const_lv4_0);
    shl_ln818_14_fu_470_p3 <= (p_read_185_reg_512_pp0_iter1_reg & ap_const_lv4_0);
    shl_ln818_1_fu_193_p3 <= (p_read1 & ap_const_lv4_0);
    shl_ln818_2_fu_201_p3 <= (p_read2 & ap_const_lv4_0);
    shl_ln818_3_fu_343_p3 <= (p_read319_reg_532 & ap_const_lv4_0);
    shl_ln818_4_fu_350_p3 <= (p_read420_reg_527 & ap_const_lv4_0);
    shl_ln818_5_fu_209_p3 <= (p_read5 & ap_const_lv4_0);
    shl_ln818_6_fu_217_p3 <= (p_read6 & ap_const_lv4_0);
    shl_ln818_7_fu_357_p3 <= (p_read723_reg_522 & ap_const_lv4_0);
    shl_ln818_8_fu_225_p3 <= (p_read8 & ap_const_lv4_0);
    shl_ln818_9_fu_233_p3 <= (p_read9 & ap_const_lv4_0);
    shl_ln818_s_fu_241_p3 <= (p_read10 & ap_const_lv4_0);
    zext_ln66_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_read_reg_577),64));
    zext_ln813_10_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_s_fu_241_p3),11));
    zext_ln813_11_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_10_fu_249_p3),11));
    zext_ln813_12_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_11_fu_364_p3),12));
    zext_ln813_13_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_12_fu_257_p3),11));
    zext_ln813_14_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_13_fu_265_p3),11));
    zext_ln813_15_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_14_fu_470_p3),15));
    zext_ln813_16_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_reg_542),12));
    zext_ln813_17_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_1_fu_403_p2),13));
    zext_ln813_18_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_5_fu_432_p2),14));
    zext_ln813_19_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_13_fu_492_p2),15));
    zext_ln813_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_1_fu_193_p3),11));
    zext_ln813_20_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_3_reg_547),12));
    zext_ln813_21_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_4_fu_422_p2),13));
    zext_ln813_22_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_7_reg_552_pp0_iter1_reg),14));
    zext_ln813_23_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_9_reg_557),13));
    zext_ln813_24_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_10_reg_562),12));
    zext_ln813_25_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_11_fu_454_p2),13));
    zext_ln813_26_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln813_12_reg_572),14));
    zext_ln813_2_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_2_fu_201_p3),11));
    zext_ln813_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_3_fu_343_p3),13));
    zext_ln813_4_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_4_fu_350_p3),12));
    zext_ln813_5_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_5_fu_209_p3),11));
    zext_ln813_6_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_6_fu_217_p3),11));
    zext_ln813_7_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_7_fu_357_p3),14));
    zext_ln813_8_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_8_fu_225_p3),11));
    zext_ln813_9_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln818_9_fu_233_p3),11));
    zext_ln813_cast_fu_371_p4 <= ((ap_const_lv1_1 & p_read16_reg_537) & ap_const_lv4_0);
    zext_ln813_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln813_cast_fu_371_p4),12));
end behav;
