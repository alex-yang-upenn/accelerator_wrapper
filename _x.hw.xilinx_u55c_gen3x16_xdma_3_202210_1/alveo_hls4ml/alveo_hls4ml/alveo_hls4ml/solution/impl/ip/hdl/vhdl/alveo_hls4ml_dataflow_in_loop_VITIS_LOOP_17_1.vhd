-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_dataflow_in_loop_VITIS_LOOP_17_1 is
port (
    in_buf_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_buf_ce0 : OUT STD_LOGIC;
    in_buf_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    in_buf_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
    in_buf_we0 : OUT STD_LOGIC;
    in_buf_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_buf_ce1 : OUT STD_LOGIC;
    in_buf_d1 : OUT STD_LOGIC_VECTOR (287 downto 0);
    in_buf_q1 : IN STD_LOGIC_VECTOR (287 downto 0);
    in_buf_we1 : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (14 downto 0);
    out_buf_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_ce0 : OUT STD_LOGIC;
    out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_buf_we0 : OUT STD_LOGIC;
    out_buf_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_ce1 : OUT STD_LOGIC;
    out_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_buf_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_buf_empty_n : IN STD_LOGIC;
    in_buf_read : OUT STD_LOGIC;
    i_ap_vld : IN STD_LOGIC;
    out_buf_full_n : IN STD_LOGIC;
    out_buf_write : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of alveo_hls4ml_dataflow_in_loop_VITIS_LOOP_17_1 is 
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_E : STD_LOGIC_VECTOR (14 downto 0) := "000000000001110";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal ereg_v1_U0_ap_continue : STD_LOGIC;
    signal ereg_v1_U0_ap_start : STD_LOGIC;
    signal ereg_v1_U0_ap_done : STD_LOGIC;
    signal ereg_v1_U0_ap_idle : STD_LOGIC;
    signal ereg_v1_U0_ap_ready : STD_LOGIC;
    signal ereg_v1_U0_in_buf_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ereg_v1_U0_in_buf_ce0 : STD_LOGIC;
    signal ereg_v1_U0_i : STD_LOGIC_VECTOR (13 downto 0);
    signal ereg_v1_U0_out_buf_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ereg_v1_U0_out_buf_ce0 : STD_LOGIC;
    signal ereg_v1_U0_out_buf_we0 : STD_LOGIC;
    signal ereg_v1_U0_out_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ereg_v1_U0_in_buf_write : STD_LOGIC;
    signal ereg_v1_U0_out_buf_write : STD_LOGIC;

    component alveo_hls4ml_ereg_v1 IS
    port (
        ap_continue : IN STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_buf_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_buf_ce0 : OUT STD_LOGIC;
        in_buf_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        i : IN STD_LOGIC_VECTOR (13 downto 0);
        out_buf_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_ce0 : OUT STD_LOGIC;
        out_buf_we0 : OUT STD_LOGIC;
        out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    ereg_v1_U0 : component alveo_hls4ml_ereg_v1
    port map (
        ap_continue => ereg_v1_U0_ap_continue,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ereg_v1_U0_ap_start,
        ap_done => ereg_v1_U0_ap_done,
        ap_idle => ereg_v1_U0_ap_idle,
        ap_ready => ereg_v1_U0_ap_ready,
        in_buf_address0 => ereg_v1_U0_in_buf_address0,
        in_buf_ce0 => ereg_v1_U0_in_buf_ce0,
        in_buf_q0 => in_buf_q0,
        i => ereg_v1_U0_i,
        out_buf_address0 => ereg_v1_U0_out_buf_address0,
        out_buf_ce0 => ereg_v1_U0_out_buf_ce0,
        out_buf_we0 => ereg_v1_U0_out_buf_we0,
        out_buf_d0 => ereg_v1_U0_out_buf_d0);




    ap_done <= ereg_v1_U0_ap_done;
    ap_idle <= ereg_v1_U0_ap_idle;
    ap_ready <= ereg_v1_U0_ap_ready;
    ereg_v1_U0_ap_continue <= ap_continue;
    ereg_v1_U0_ap_start <= ap_start;
    
    ereg_v1_U0_i_proc : process(i)
    variable vlo_cpy : STD_LOGIC_VECTOR(15+15 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(15+15 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(15 - 1 downto 0);
    variable ereg_v1_U0_i_i : integer;
    variable section : STD_LOGIC_VECTOR(15 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(15 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(15 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv15_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv15_E(4 - 1 downto 0);
        v0_cpy := i;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(15-1-unsigned(ap_const_lv15_E(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(15-1-unsigned(ap_const_lv15_0(4-1 downto 0)));
            for ereg_v1_U0_i_i in 0 to 15-1 loop
                v0_cpy(ereg_v1_U0_i_i) := i(15-1-ereg_v1_U0_i_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(15-1 downto 0)))));
        res_mask := res_mask(15-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        ereg_v1_U0_i <= resvalue(14-1 downto 0);
    end process;

    ereg_v1_U0_in_buf_write <= ap_const_logic_0;
    ereg_v1_U0_out_buf_write <= ap_const_logic_0;
    in_buf_address0 <= ereg_v1_U0_in_buf_address0;
    in_buf_address1 <= ap_const_lv14_0;
    in_buf_ce0 <= ereg_v1_U0_in_buf_ce0;
    in_buf_ce1 <= ap_const_logic_0;
    in_buf_d0 <= ap_const_lv288_lc_1;
    in_buf_d1 <= ap_const_lv288_lc_1;
    in_buf_read <= ereg_v1_U0_in_buf_write;
    in_buf_we0 <= ap_const_logic_0;
    in_buf_we1 <= ap_const_logic_0;
    out_buf_address0 <= ereg_v1_U0_out_buf_address0;
    out_buf_address1 <= ap_const_lv14_0;
    out_buf_ce0 <= ereg_v1_U0_out_buf_ce0;
    out_buf_ce1 <= ap_const_logic_0;
    out_buf_d0 <= ereg_v1_U0_out_buf_d0;
    out_buf_d1 <= ap_const_lv16_0;
    out_buf_we0 <= ereg_v1_U0_out_buf_we0;
    out_buf_we1 <= ap_const_logic_0;
    out_buf_write <= ereg_v1_U0_out_buf_write;
end behav;
