// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_normalize_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [5:0] p_read2;
input  [9:0] p_read3;
input  [15:0] p_read4;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;
reg[15:0] ap_return_2;
reg[15:0] ap_return_3;
reg[15:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [25:0] mul_ln1347_fu_93_p2;
reg   [25:0] mul_ln1347_reg_217;
reg    ap_block_pp0_stage0_11001;
wire   [25:0] mul_ln1347_1_fu_96_p2;
reg   [25:0] mul_ln1347_1_reg_221;
wire   [20:0] r_V_fu_95_p2;
reg   [20:0] r_V_reg_225;
wire   [25:0] r_V_1_fu_94_p2;
reg   [25:0] r_V_1_reg_229;
wire   [25:0] mul_ln1347_2_fu_92_p2;
reg   [25:0] mul_ln1347_2_reg_233;
reg  signed [15:0] p_read49_reg_376;
reg   [9:0] p_read38_reg_381;
reg   [5:0] p_read27_reg_386;
reg  signed [15:0] p_read16_reg_391;
reg  signed [15:0] p_read_10_reg_396;
wire   [15:0] mul_ln1347_2_fu_92_p1;
wire    ap_block_pp0_stage0;
wire   [15:0] mul_ln1347_fu_93_p1;
wire   [9:0] r_V_1_fu_94_p0;
wire  signed [15:0] r_V_1_fu_94_p1;
wire   [5:0] r_V_fu_95_p0;
wire   [15:0] r_V_fu_95_p1;
wire  signed [15:0] mul_ln1347_1_fu_96_p1;
wire   [25:0] ret_V_fu_258_p2;
wire   [25:0] ret_V_1_fu_274_p2;
wire   [21:0] zext_ln1347_fu_290_p1;
wire   [21:0] ret_V_2_fu_294_p2;
wire   [11:0] trunc_ln818_2_fu_300_p4;
wire   [25:0] ret_V_3_fu_314_p2;
wire   [25:0] ret_V_4_fu_330_p2;
wire  signed [15:0] sext_ln818_fu_310_p1;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [15:0] ap_return_2_preg;
reg   [15:0] ap_return_3_preg;
reg   [15:0] ap_return_4_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] r_V_1_fu_94_p00;
wire   [20:0] r_V_fu_95_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
#0 ap_return_2_preg = 16'd0;
#0 ap_return_3_preg = 16'd0;
#0 ap_return_4_preg = 16'd0;
end

alveo_hls4ml_mul_16s_16ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16ns_26_1_1_U39(
    .din0(p_read49_reg_376),
    .din1(mul_ln1347_2_fu_92_p1),
    .dout(mul_ln1347_2_fu_92_p2)
);

alveo_hls4ml_mul_16s_16ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16ns_26_1_1_U40(
    .din0(p_read_10_reg_396),
    .din1(mul_ln1347_fu_93_p1),
    .dout(mul_ln1347_fu_93_p2)
);

alveo_hls4ml_mul_10ns_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_10ns_16s_26_1_1_U41(
    .din0(r_V_1_fu_94_p0),
    .din1(r_V_1_fu_94_p1),
    .dout(r_V_1_fu_94_p2)
);

alveo_hls4ml_mul_6ns_16ns_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
mul_6ns_16ns_21_1_1_U42(
    .din0(r_V_fu_95_p0),
    .din1(r_V_fu_95_p1),
    .dout(r_V_fu_95_p2)
);

alveo_hls4ml_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U43(
    .din0(p_read16_reg_391),
    .din1(mul_ln1347_1_fu_96_p1),
    .dout(mul_ln1347_1_fu_96_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_0_preg <= {{ret_V_fu_258_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_1_preg <= {{ret_V_1_fu_274_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 16'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_2_preg <= sext_ln818_fu_310_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 16'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_3_preg <= {{ret_V_3_fu_314_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 16'd0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_return_4_preg <= {{ret_V_4_fu_330_p2[25:10]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln1347_1_reg_221 <= mul_ln1347_1_fu_96_p2;
        mul_ln1347_2_reg_233 <= mul_ln1347_2_fu_92_p2;
        mul_ln1347_reg_217 <= mul_ln1347_fu_93_p2;
        p_read16_reg_391 <= p_read1;
        p_read27_reg_386 <= p_read2;
        p_read38_reg_381 <= p_read3;
        p_read49_reg_376 <= p_read4;
        p_read_10_reg_396 <= p_read;
        r_V_1_reg_229 <= r_V_1_fu_94_p2;
        r_V_reg_225 <= r_V_fu_95_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return_0 = {{ret_V_fu_258_p2[25:10]}};
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return_1 = {{ret_V_1_fu_274_p2[25:10]}};
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return_2 = sext_ln818_fu_310_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return_3 = {{ret_V_3_fu_314_p2[25:10]}};
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_return_4 = {{ret_V_4_fu_330_p2[25:10]}};
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign mul_ln1347_1_fu_96_p1 = 26'd67078526;

assign mul_ln1347_2_fu_92_p1 = 26'd17136;

assign mul_ln1347_fu_93_p1 = 26'd32120;

assign r_V_1_fu_94_p0 = r_V_1_fu_94_p00;

assign r_V_1_fu_94_p00 = p_read38_reg_381;

assign r_V_1_fu_94_p1 = 26'd67078224;

assign r_V_fu_95_p0 = r_V_fu_95_p00;

assign r_V_fu_95_p00 = p_read27_reg_386;

assign r_V_fu_95_p1 = 21'd30855;

assign ret_V_1_fu_274_p2 = ($signed(mul_ln1347_1_reg_221) + $signed(26'd35419136));

assign ret_V_2_fu_294_p2 = ($signed(zext_ln1347_fu_290_p1) + $signed(22'd2219008));

assign ret_V_3_fu_314_p2 = ($signed(r_V_1_reg_229) + $signed(26'd43024384));

assign ret_V_4_fu_330_p2 = (mul_ln1347_2_reg_233 + 26'd7068672);

assign ret_V_fu_258_p2 = ($signed(mul_ln1347_reg_217) + $signed(26'd35853312));

assign sext_ln818_fu_310_p1 = $signed(trunc_ln818_2_fu_300_p4);

assign trunc_ln818_2_fu_300_p4 = {{ret_V_2_fu_294_p2[21:10]}};

assign zext_ln1347_fu_290_p1 = r_V_reg_225;

endmodule //alveo_hls4ml_normalize_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s
